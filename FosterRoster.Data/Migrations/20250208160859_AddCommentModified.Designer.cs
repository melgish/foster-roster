// <auto-generated />
using System;
using FosterRoster.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace FosterRoster.Data.Migrations
{
    [DbContext(typeof(FosterRosterDbContext))]
    [Migration("20250208160859_AddCommentModified")]
    partial class AddCommentModified
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("FosterRoster.Domain.Comment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityAlwaysColumn(b.Property<int>("Id"));

                    b.Property<int>("FelineId")
                        .HasColumnType("integer");

                    b.Property<DateTimeOffset?>("Modified")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasMaxLength(4096)
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("TimeStamp")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now()");

                    b.HasKey("Id");

                    b.HasIndex("FelineId", "TimeStamp")
                        .IsDescending(false, true)
                        .HasDatabaseName("IX_Comments_FelineId_TimeStamp");

                    b.ToTable("Comments", (string)null);
                });

            modelBuilder.Entity("FosterRoster.Domain.Feline", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityAlwaysColumn(b.Property<int>("Id"));

                    b.Property<string>("AnimalId")
                        .HasMaxLength(24)
                        .HasColumnType("character varying(24)");

                    b.Property<string>("Breed")
                        .HasMaxLength(48)
                        .HasColumnType("character varying(48)");

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasMaxLength(16)
                        .HasColumnType("character varying(16)");

                    b.Property<string>("Color")
                        .HasMaxLength(96)
                        .HasColumnType("character varying(96)");

                    b.Property<int?>("FostererId")
                        .HasColumnType("integer");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasMaxLength(16)
                        .HasColumnType("character varying(16)");

                    b.Property<DateTimeOffset?>("InactivatedAtUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("IntakeAgeInWeeks")
                        .HasColumnType("integer");

                    b.Property<DateOnly>("IntakeDate")
                        .HasColumnType("date");

                    b.Property<bool>("IsInactive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)");

                    b.Property<DateOnly?>("RegistrationDate")
                        .HasColumnType("date");

                    b.Property<int?>("SourceId")
                        .HasColumnType("integer");

                    b.Property<string>("Weaned")
                        .IsRequired()
                        .HasMaxLength(16)
                        .HasColumnType("character varying(16)");

                    b.HasKey("Id");

                    b.HasIndex("FostererId");

                    b.HasIndex("IsInactive")
                        .HasFilter("\"IsInactive\" = false");

                    b.HasIndex("SourceId");

                    b.ToTable("Felines", (string)null);
                });

            modelBuilder.Entity("FosterRoster.Domain.Fosterer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityAlwaysColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("ContactMethod")
                        .IsRequired()
                        .HasMaxLength(16)
                        .HasColumnType("character varying(16)");

                    b.Property<string>("Email")
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)");

                    b.Property<DateTimeOffset?>("InactivatedAtUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsInactive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)");

                    b.Property<string>("Phone")
                        .HasMaxLength(16)
                        .HasColumnType("character varying(16)");

                    b.HasKey("Id");

                    b.HasIndex("IsInactive")
                        .HasFilter("\"IsInactive\" = false");

                    b.ToTable("Fosterers", (string)null);
                });

            modelBuilder.Entity("FosterRoster.Domain.Source", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityAlwaysColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)");

                    b.HasKey("Id");

                    b.ToTable("Sources", (string)null);
                });

            modelBuilder.Entity("FosterRoster.Domain.Thumbnail", b =>
                {
                    b.Property<int>("FelineId")
                        .HasColumnType("integer");

                    b.Property<string>("ContentType")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<byte[]>("ImageData")
                        .IsRequired()
                        .HasColumnType("bytea");

                    b.Property<uint>("Version")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("xid")
                        .HasColumnName("xmin");

                    b.HasKey("FelineId");

                    b.ToTable("Thumbnails", (string)null);
                });

            modelBuilder.Entity("FosterRoster.Domain.Weight", b =>
                {
                    b.Property<int>("FelineId")
                        .HasColumnType("integer");

                    b.Property<DateTimeOffset>("DateTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Units")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<float>("Value")
                        .HasColumnType("float");

                    b.HasKey("FelineId", "DateTime")
                        .HasName("PK_Weights");

                    b.ToTable("Weights", (string)null);
                });

            modelBuilder.Entity("FosterRoster.Domain.Comment", b =>
                {
                    b.HasOne("FosterRoster.Domain.Feline", "Feline")
                        .WithMany("Comments")
                        .HasForeignKey("FelineId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("FK_Comments_Felines");

                    b.Navigation("Feline");
                });

            modelBuilder.Entity("FosterRoster.Domain.Feline", b =>
                {
                    b.HasOne("FosterRoster.Domain.Fosterer", "Fosterer")
                        .WithMany("Felines")
                        .HasForeignKey("FostererId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("FK_Fosterers_Felines");

                    b.HasOne("FosterRoster.Domain.Source", "Source")
                        .WithMany()
                        .HasForeignKey("SourceId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("FK_Sources_Felines");

                    b.Navigation("Fosterer");

                    b.Navigation("Source");
                });

            modelBuilder.Entity("FosterRoster.Domain.Thumbnail", b =>
                {
                    b.HasOne("FosterRoster.Domain.Feline", null)
                        .WithOne("Thumbnail")
                        .HasForeignKey("FosterRoster.Domain.Thumbnail", "FelineId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("FosterRoster.Domain.Weight", b =>
                {
                    b.HasOne("FosterRoster.Domain.Feline", "Feline")
                        .WithMany("Weights")
                        .HasForeignKey("FelineId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("FK_Weights_Felines");

                    b.Navigation("Feline");
                });

            modelBuilder.Entity("FosterRoster.Domain.Feline", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("Thumbnail");

                    b.Navigation("Weights");
                });

            modelBuilder.Entity("FosterRoster.Domain.Fosterer", b =>
                {
                    b.Navigation("Felines");
                });
#pragma warning restore 612, 618
        }
    }
}
