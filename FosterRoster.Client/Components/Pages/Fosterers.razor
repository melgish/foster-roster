@page "/fosterers"
@rendermode InteractiveWebAssembly
@implements IDisposable
@inject PersistentComponentState ComponentState;
@inject IFostererRepository FostererRepository
@inject NavigationManager NavigationManager
@inject ISnackbar Snackbar

<PageTitle>Fosterers</PageTitle>
<MudStack>
    <MudPaper Elevation="3" Class="pa-3">
        <FostererForm
            Fosterer="_fosterer"
            IsNew="@(_fosterer.Id == 0)"
            OnDelete="OnDeleteAsync"
            OnSave="OnSaveAsync"
        />
    </MudPaper>
    <MudPaper Elevation="3">
        <FosterersGrid Items="_fosterers" OnAdd="@OnAddAsync" OnEdit="@OnEditAsync" />
    </MudPaper>
</MudStack>

@code {
    private Fosterer _fosterer = new();
    private List<Fosterer>? _fosterers = [];
    private IDisposable? _stateSubscription;

    private Task OnAddAsync()
    {
        _fosterer = new();
        return Task.CompletedTask;
    }
    public void Dispose() => _stateSubscription?.Dispose();

    private async Task<List<Fosterer>> LoadAsync()
        => _fosterers = await FostererRepository.GetAllAsync();
    
    protected override async Task OnInitializedAsync()
    {
        _stateSubscription = ComponentState.RegisterOnPersisting(PersistStateAsync);
        ComponentState.TryTakeFromJson<List<Fosterer>>("fosterers", out var fosterers);
        _fosterers = fosterers is not null ? _fosterers : await LoadAsync();
        _fosterer = new();
        await base.OnInitializedAsync();
    }

    private async Task OnDeleteAsync()
    {
        if (_fosterer.Id <= 0)
        {
            return;
        }

        var deleted = await FostererRepository.DeleteByKeyAsync(_fosterer.Id);
        if (deleted)
        {
            _fosterer = new();
            Snackbar.Add("Deleted", Severity.Success);
        }
        else
        {
            Snackbar.Add("Failed to Delete", Severity.Error);
        }
    }
    private async Task OnEditAsync(int fostererId)
    {
        var fetched = await FostererRepository.GetByKeyAsync(fostererId);
        if (fetched is null)
        {
            NavigationManager.NavigateTo("/not-found");
            return;
        }
        _fosterer = fetched;
    }

    private async Task OnSaveAsync(FostererEditModel model)
    {
        var updated = model.Id == 0
            ? await FostererRepository.AddAsync(model.ToFosterer())
            : await FostererRepository.UpdateAsync(model.Id, model.ToFosterer());
        if (updated is not null)
        {
            _fosterer = updated;
        }
    }

    private Task PersistStateAsync()
    {
        ComponentState.PersistAsJson("fosterers", _fosterers);
        return Task.CompletedTask;
    }
}