@page "/fosterers"
@rendermode InteractiveWebAssembly
@implements IDisposable
@inject PersistentComponentState ComponentState;
@inject IFostererRepository FostererRepository
@inject NavigationManager NavigationManager
@inject ISnackbar Snackbar

<PageTitle>Fosterers</PageTitle>
<MudStack>
    <MudPaper Elevation="3" Class="pa-3">
        <FostererForm
            Fosterer="_fosterer"
            IsNew="@(_fosterer.Id == 0)"
            OnDelete="OnDeleteAsync"
            OnSave="OnSaveAsync"
        />
    </MudPaper>
    <MudPaper Elevation="3">
        <FosterersGrid Items="_fosterers" OnAdd="@OnAddAsync" OnEdit="@OnEditAsync"/>
    </MudPaper>
</MudStack>

@code {
    private Fosterer _fosterer = new();
    private ICollection<Fosterer>? _fosterers = [];
    private IDisposable? _stateSubscription;

    private Task OnAddAsync()
    {
        _fosterer = new();
        return Task.CompletedTask;
    }

    public void Dispose() => _stateSubscription?.Dispose();

    protected override async Task OnInitializedAsync()
    {
        _stateSubscription = ComponentState.RegisterOnPersisting(PersistStateAsync);
        ComponentState.TryTakeFromJson("fosterers", out _fosterers);
        _fosterers ??= (await FostererRepository.GetAllAsync()).ValueOrDefault ?? [];
        _fosterer = new();
        await base.OnInitializedAsync();
    }

    private async Task OnDeleteAsync()
    {
        if (_fosterer.Id <= 0)
        {
            return;
        }

        if ((await FostererRepository.DeleteByKeyAsync(_fosterer.Id)).IsFailed)
        {
            Snackbar.Add("Failed to Delete", Severity.Error);
            return;
        }

        _fosterer = new();
        Snackbar.Add("Deleted", Severity.Success);
    }

    private async Task OnEditAsync(int fostererId)
    {
        var rs = await FostererRepository.GetByKeyAsync(fostererId);
        if (rs.IsFailed)
        {
            NavigationManager.NavigateTo("/not-found");
            return;
        }

        _fosterer = rs.Value;
    }

    private async Task OnSaveAsync(FostererEditModel model)
    {
        var rs = model.Id == 0
            ? await FostererRepository.AddAsync(model.ToFosterer())
            : await FostererRepository.UpdateAsync(model.Id, model.ToFosterer());
        if (rs.IsFailed)
        {
            Snackbar.Add("Failed to Save", Severity.Error);
            return;
        }

        _fosterer = rs.Value;
    }

    private Task PersistStateAsync()
    {
        ComponentState.PersistAsJson("fosterers", _fosterers);
        return Task.CompletedTask;
    }

}