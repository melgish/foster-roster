@page "/weights"
@rendermode InteractiveWebAssembly
@implements IDisposable
@inject ISnackbar Snackbar
@inject IWeightRepository WeightRepository
@inject PersistentComponentState ComponentState;
@inject TimeProvider TimeProvider

<PageTitle>Weights</PageTitle>

@if (_allWeights is null)
{
    <Loading/>
}
else
{
    <MudStack>
        <MudPaper Elevation="3"
                  Class="pa-2">
            <EditForm FormName="weightForm"
                      Model="_model"
                      OnValidSubmit="OnSaveAsync">
                <FluentValidationValidator/>
                <MudGrid Spacing="3">
                    <MudItem xs="12">
                        <h1>Enter Weight</h1>
                    </MudItem>
                    <MudItem xs="12"
                             sm="6">
                        <MudDatePicker @bind-Date="_model.DateTime.Date"
                                       Clearable="true"
                                       Editable="true"
                                       HelperText="MM/DD/YYYY"
                                       Label="Date"/>
                        <ValidationMessage For="@(() => _model.DateTime.Date)"/>
                    </MudItem>
                    <MudItem xs="12"
                             sm="6">
                        <MudTimePicker @bind-Time="_model.DateTime.Time"
                                       AmPm="true"
                                       Clearable="true"
                                       HelperText="HH:MM (use 24 hour time for now, working on it)"
                                       Editable="true"
                                       Label="Time"/>
                        <ValidationMessage For="@(() => _model.DateTime.Time)"/>
                    </MudItem>
                    <MudItem xs="12">
                        <FelineAutoComplete Value="@_model.FelineId"
                                            ValueChanged="@OnFelineSelected"/>
                        <ValidationMessage For="@(() => _model.FelineId)"/>
                    </MudItem>
                    <MudItem xs="12"
                             sm="6">
                        <MudNumericField @bind-Value="_model.Value"
                                         T="float"
                                         Label="Weight"
                                         Step="0.1f"
                                         Min="0.0f"
                                         HideSpinButtons/>
                        <ValidationMessage For="@(() => _model.Value)"/>
                    </MudItem>
                    <MudItem xs="12"
                             sm="6">
                        <MudSelect Label="Units"
                                   Value="@_model.Units"
                                   T="WeightUnit"
                                   ValueChanged="@OnUnitsSelected">
                            <MudSelectItem Value="WeightUnit.g">Grams</MudSelectItem>
                            <MudSelectItem Value="WeightUnit.oz">Ounces</MudSelectItem>
                            <MudSelectItem Value="WeightUnit.lbs">Pounds</MudSelectItem>
                            <MudSelectItem Value="WeightUnit.kg">Kilograms</MudSelectItem>
                        </MudSelect>
                    </MudItem>
                    <MudItem xs="12">
                        <MudStack Row>
                            <MudSpacer/>
                            <MudButton Variant="Variant.Outlined"
                                       ButtonType="ButtonType.Submit"
                                       Color="Color.Primary"
                                       Disabled="_isSaving">Save
                            </MudButton>
                            <MudButton Variant="Variant.Outlined"
                                       OnClick="@Reset"
                                       Color="Color.Secondary"
                                       Disabled="_isSaving">Reset
                            </MudButton>
                        </MudStack>
                    </MudItem>
                </MudGrid>
            </EditForm>
        </MudPaper>
        <MudPaper Elevation="3"
                  Class="pa-2">
            <h2>Recent Weights</h2>
            <MudDataGrid Items="_filteredWeights" Dense>
                <Columns>
                    <PropertyColumn Property="x => x.DateTime"
                                    Title="Date"
                                    Format="MMM dd \a\t hh:mm tt"/>
                    <PropertyColumn Property="x => x.Feline.Name"
                                    Title="Name"/>
                    <TemplateColumn Title="Weight">
                        <CellTemplate>
                            @context.Item.Format(_units)
                        </CellTemplate>
                    </TemplateColumn>
                    <TemplateColumn Context="data">
                        <CellTemplate>
                            <MudIconButton Icon="@Icons.Material.TwoTone.Delete"
                                           OnClick="@(() => OnDeleteAsync(data.Item))"
                                           Color="Color.Error"
                                           Size="Size.Small"/>
                        </CellTemplate>
                    </TemplateColumn>
                </Columns>
            </MudDataGrid>
        </MudPaper>
    </MudStack>
}

@code {
    private List<Weight>? _allWeights;
    private IEnumerable<Weight>? _filteredWeights;
    private bool _isSaving;
    private WeightEditModel _model = new();
    private IDisposable? _stateSubscription;
    private WeightUnit _units = WeightUnit.g;

    public void Dispose() => _stateSubscription?.Dispose();

    protected override async Task OnInitializedAsync()
    {
        _stateSubscription = ComponentState.RegisterOnPersisting(PersistStateAsync);
        ComponentState.TryTakeFromJson("allWeights", out _allWeights);
        _allWeights ??= (await WeightRepository.GetAllAsync()).ValueOrDefault ?? [];
        _filteredWeights = _allWeights;
        Reset();
    }

    private void OnFelineSelected(int felineId)
    {
        _model.FelineId = felineId;
        _filteredWeights = felineId switch
        {
            0 => _allWeights ?? [],
            // When cat is selected, only show weights for the selected cat
            _ => _allWeights?.Where(x => x.FelineId == felineId) ?? []
        };
    }

    private void OnUnitsSelected(WeightUnit unit)
    {
        _model.Units = unit;
        _units = unit;
    }

    private void Reset()
    {
        // Start a new form, but keep the selected unit type
        _model = new()
        {
            DateTime = TimeProvider.GetUtcNow().UtcDateTime,
            Units = _units
        };
    }

    private async Task OnSaveAsync()
    {
        _isSaving = true;
        var weight = (await WeightRepository.AddAsync(_model.ToWeight())).ValueOrDefault;
        Snackbar.Add("Weight saved", Severity.Success);
        // insert the weight as the most recent regardless of date and time
        _allWeights = (_allWeights ?? []).Prepend(weight).ToList();
        OnFelineSelected(_model.FelineId);
        _isSaving = false;
    }

    private async Task OnDeleteAsync(Weight? weight)
    {
        if (weight is null)
        {
            return;
        }

        if ((await WeightRepository.DeleteByKeyAsync(weight.FelineId, weight.DateTime)).IsSuccess)
        {
            Snackbar.Add("Weight deleted", Severity.Success);
            _allWeights = _allWeights?.Where(x => x.FelineId != weight.FelineId || x.DateTime != weight.DateTime).ToList() ?? [];
            OnFelineSelected(_model.FelineId);
        }
    }

    private Task PersistStateAsync()
    {
        ComponentState.PersistAsJson("allWeights", _allWeights);
        return Task.CompletedTask;
    }

}
