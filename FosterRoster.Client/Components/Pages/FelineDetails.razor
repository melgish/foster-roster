@page "/details/{FelineId:int}"
@rendermode InteractiveWebAssembly
@implements IDisposable
@inject ICommentRepository CommentRepository
@inject PersistentComponentState ComponentState;
@inject IFelineRepository FelineRepository
@inject NavigationManager NavigationManager
@inject ISnackbar Snackbar

<PageTitle>Details: @Name</PageTitle>
@if (_feline is null)
{
    <Loading/>
}
else
{
    <MudStack>
        <MudPaper Elevation="3" Class="pa-2">
            <FelineEditForm Feline="@_feline"
                            OnActivate="OnActivateAsync"
                            OnDelete="OnDeleteAsync"
                            OnInactivate="OnInactivateAsync"
                            OnSave="OnSaveAsync"/>
        </MudPaper>
        <MudTabs Elevation="3" ApplyEffectsToContainer="true" PanelClass="pa-2">
            <MudTabPanel Text="Journal" Icon="@Icons.Material.Filled.NoteAlt">
                <CommentForm FelineId="@FelineId" CommentAdded="OnCommentAdded"/>
                <MudStack Spacing="3">
                    @foreach (var comment in _feline.Comments)
                    {
                        <CommentCard @key="comment.Id" Comment="comment" OnDelete="OnDeleteCommentAsync"/>
                    }
                </MudStack>
            </MudTabPanel>
            <MudTabPanel Text="Medical" Icon="@Icons.Material.Filled.HealthAndSafety">
                <MudText>TBD</MudText>
            </MudTabPanel>
            <MudTabPanel Text="TBD" Icon="@Icons.Material.Filled.QuestionMark">
                <MudText>TBD</MudText>
            </MudTabPanel>
        </MudTabs>
    </MudStack>
}

@code {
    private IDisposable? _stateSubscription;
    private Feline? _feline;

    private string Name => _feline?.Name ?? string.Empty;

    [Parameter] public int FelineId { get; set; }

    private async Task<Feline?> LoadAsync()
        => (await FelineRepository.GetByKeyAsync(FelineId)).ValueOrDefault;

    void OnCommentAdded(Comment comment)
    {
        _feline!.Comments = _feline.Comments.Prepend(comment).ToArray();
    }

    async Task OnDeleteCommentAsync(Comment comment)
    {
        if ((await CommentRepository.DeleteByKeyAsync(comment.Id)).IsSuccess)
        {
            _feline!.Comments = _feline.Comments.Where(c => c.Id != comment.Id).ToArray();
        }
    }

    protected override async Task OnInitializedAsync()
    {
        _stateSubscription = ComponentState.RegisterOnPersisting(PersistStateAsync);
        ComponentState.TryTakeFromJson("feline", out _feline);
        _feline ??= await LoadAsync();
        if (_feline is null)
        {
            NavigationManager.NavigateTo("/not-found");
        }
    }

    private Task PersistStateAsync()
    {
        ComponentState.PersistAsJson("feline", _feline);
        return Task.CompletedTask;
    }

    private async Task RefreshAsync()
        => _feline = await LoadAsync();

    public void Dispose() => _stateSubscription?.Dispose();

    private async Task OnActivateAsync()
    {
        var rs = await FelineRepository.ActivateAsync(FelineId);
        _ = rs switch
        {
            { IsSuccess: true } => Snackbar.Add("Activated", Severity.Success),
            { IsSuccess: false } => Snackbar.Add(rs.Errors.First().Message, Severity.Error)
        };
        await RefreshAsync();
    }

    private async Task OnDeleteAsync()
    {
        var rs = await FelineRepository.DeleteByKeyAsync(FelineId);
        if (rs.IsFailed)
        {
            Snackbar.Add("Failed to delete", Severity.Error);
            await RefreshAsync();
            return;
        }

        NavigationManager.NavigateTo("/");
    }

    private async Task OnInactivateAsync(DateTimeOffset asOf)
    {
        var rs = await FelineRepository.DeactivateAsync(FelineId, asOf);
        if (rs.IsSuccess)
        {
            Snackbar.Add("Deactivated", Severity.Success);
        }
        else
        {
            Snackbar.Add(rs.Errors.First().Message, Severity.Error);
        }

        await RefreshAsync();
    }

    /// <summary>
    /// Save event handler for the FelineEditForm
    /// </summary>
    private async Task OnSaveAsync(FelineEditModel model)
    {
        var rs = await FelineRepository.UpdateAsync(FelineId, model.ToFeline());
        if (rs.IsSuccess)
        {
            _feline = rs.Value;
            Snackbar.Add("Saved", Severity.Success);
        }
        else
        {
            Snackbar.Add("Failed to save", Severity.Error);
        }

        await RefreshAsync();
    }

}
