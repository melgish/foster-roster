@page "/details/{FelineId:int}"
@rendermode InteractiveWebAssembly
@inject IFelineRepository FelineRepository
@inject ICommentRepository CommentRepository
@inject TimeProvider TimeProvider
@inject NavigationManager NavigationManager
@inject IDialogService DialogService
@inject PersistentComponentState ComponentState;
@inject ISnackbar Snackbar

<PageTitle>Details: @Name</PageTitle>
@if (feline is null)
{
    <p>Loading...</p>
}
else
{
    <MudStack>
        <MudPaper Elevation="3" Class="pa-2">
            <FelineEditForm Feline="@feline"
                            OnActivate="OnActivateAsync"
                            OnDelete="OnDeleteAsync"
                            OnInactivate="OnInactivateAsync"
                            OnSave="OnSaveAsync" />
        </MudPaper>
        <MudTabs Elevation="3" ApplyEffectsToContainer="true" PanelClass="pa-2">
            <MudTabPanel Text="Journal" Icon="@Icons.Material.Filled.NoteAlt">
                <CommentForm FelineId="@FelineId" CommentAdded="OnCommentAdded" />
                <MudStack Spacing="3">
                @foreach (var comment in feline.Comments)
                {
                    <CommentCard @key="comment.Id" Comment="comment" OnDelete="OnDeleteCommentAsync" />
                }
                </MudStack>
            </MudTabPanel>
            <MudTabPanel Text="Medical" Icon="@Icons.Material.Filled.HealthAndSafety">
                <MudText>TBD</MudText>
            </MudTabPanel>
            <MudTabPanel Text="TBD" Icon="@Icons.Material.Filled.QuestionMark">
                <MudText>TBD</MudText>
            </MudTabPanel>
        </MudTabs>
    </MudStack>
}

@code {
    private IDisposable? stateSubscription;
    private string Name => feline?.Name ?? string.Empty;
    private Feline? feline;

    [Parameter]
    public int FelineId { get; set; }

    private async Task<Feline?> LoadAsync()
    {
        return await FelineRepository.GetByIdAsync(FelineId);
    }

    private async Task RefreshAsync()
    {
        feline = await LoadAsync();
    }

    void OnCommentAdded(Comment comment)
    {
        feline!.Comments = feline.Comments.Prepend(comment).ToArray();
        StateHasChanged();
    }

    async Task OnDeleteCommentAsync(Comment comment)
    {
        if (await CommentRepository.DeleteByKeyAsync(comment.Id)) {
            feline!.Comments = feline.Comments.Where(c => c.Id != comment.Id).ToArray();
        }
    }

    protected override async Task OnInitializedAsync()
    {
        stateSubscription = ComponentState.RegisterOnPersisting(PersistStateAsync);
        ComponentState.TryTakeFromJson<Feline>("feline", out feline);
        feline ??= await LoadAsync();
        if (feline is null) {
            NavigationManager.NavigateTo("/not-found");
        }
    }

    private Task PersistStateAsync()
    {
        ComponentState.PersistAsJson("feline", feline);
        return Task.CompletedTask;
    }

    public void Dispose()
    {
        stateSubscription?.Dispose();
        stateSubscription = null;
    }

    private async Task OnActivateAsync()
    {
        if (!await FelineRepository.Activate(FelineId))
        {
            Snackbar.Add("Failed to activate", Severity.Error);
            return;
        }
        Snackbar.Add("Activated", Severity.Success);
        await RefreshAsync();
    }

    private async Task OnDeleteAsync()
    {
        if (await FelineRepository.DeleteByKeyAsync(FelineId))
        {
            NavigationManager.NavigateTo("/");
            return;
        }
        Snackbar.Add("Failed to delete", Severity.Error);
    }

    private async Task OnInactivateAsync(DateTimeOffset asOf)
    {
        if (!await FelineRepository.Inactivate(FelineId, asOf))
        {
            Snackbar.Add("Failed to inactivate", Severity.Error);
            return;
        }

        Snackbar.Add("Inactivated", Severity.Success);
        await RefreshAsync();
    }

    /// <summary>
    /// Save event handler for the FelineEditForm
    /// </summary>
    private async Task OnSaveAsync(FelineEditModel model)
    {
        var updated = await FelineRepository.UpdateAsync(FelineId, model.ToFeline());
        if (updated is null)
        {
            Snackbar.Add("Failed to save", Severity.Error);
        }
        else
        {
            feline = updated;
            Snackbar.Add("Saved", Severity.Success);
        }
        await RefreshAsync();
    }
}
