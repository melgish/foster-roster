@page "/details/{FelineId:int}"
@rendermode InteractiveWebAssembly
@implements IDisposable
@inject ICommentRepository CommentRepository
@inject PersistentComponentState ComponentState
@inject IFelineRepository FelineRepository
@inject NavigationManager NavigationManager
@inject NotificationService NotificationService

<PageTitle>Details: @Name</PageTitle>
@if (_feline is null)
{
    <Loading/>
}
else
{
    <RadzenStack>
        <RadzenCard Variant="Variant.Outlined">
            <FelineEditForm Feline="@_feline"
                            OnActivate="OnActivateAsync"
                            OnDelete="OnDeleteAsync"
                            OnInactivate="OnInactivateAsync"
                            OnSave="OnSaveAsync"/>
        </RadzenCard>
        <RadzenCard Variant="Variant.Outlined">
            <RadzenTabs>
                <Tabs>
                    <RadzenTabsItem Text="Journal" Icon="edit">
                        <RadzenStack>
                            <CommentForm FelineId="@FelineId" CommentAdded="OnCommentAdded"/>
                            @foreach (var comment in _feline.Comments)
                            {
                                <CommentCard @key="comment.Id" Comment="comment" OnDelete="OnDeleteCommentAsync"/>
                            }
                        </RadzenStack>
                    </RadzenTabsItem>
                    <RadzenTabsItem Text="Medical">
                        <RadzenText Text="Medical"/>
                    </RadzenTabsItem>
                    <RadzenTabsItem Text="TBD?"></RadzenTabsItem>
                </Tabs>
            </RadzenTabs>
        </RadzenCard>
    </RadzenStack>
}

@code {
    private IDisposable? _stateSubscription;
    private Feline? _feline;

    private string Name => _feline?.Name ?? string.Empty;

    [Parameter] public int FelineId { get; set; }

    private async Task<Feline?> LoadAsync()
        => (await FelineRepository.GetByKeyAsync(FelineId)).ValueOrDefault;

    void OnCommentAdded(Comment comment)
    {
        _feline!.Comments = _feline.Comments.Prepend(comment).ToArray();
    }

    async Task OnDeleteCommentAsync(Comment comment)
    {
        var rs = await CommentRepository.DeleteByKeyAsync(comment.Id);
        NotificationService.Notify(rs, "Comment Deleted", "Failed to delete comment");
        if (rs.IsSuccess)
        {
            _feline!.Comments = _feline.Comments.Where(c => c.Id != comment.Id).ToArray();
        }
    }

    protected override async Task OnInitializedAsync()
    {
        _stateSubscription = ComponentState.RegisterOnPersisting(PersistStateAsync);
        ComponentState.TryTakeFromJson("feline", out _feline);
        _feline ??= await LoadAsync();
        if (_feline is null)
        {
            NavigationManager.NavigateTo("/not-found");
        }
    }

    private Task PersistStateAsync()
    {
        ComponentState.PersistAsJson("feline", _feline);
        return Task.CompletedTask;
    }

    private async Task RefreshAsync()
        => _feline = await LoadAsync();

    public void Dispose() => _stateSubscription?.Dispose();

    /// <summary>
    /// Handle when user clicks activate button.
    /// </summary>
    private async Task OnActivateAsync()
    {
        var rs = await FelineRepository.ActivateAsync(FelineId);
        NotificationService.Notify(rs, "Activated", "Failed to Activate");
        await RefreshAsync();
    }

    /// <summary>
    /// Handle when user clicks delete button.
    /// </summary>
    private async Task OnDeleteAsync()
    {
        var rs = await FelineRepository.DeleteByKeyAsync(FelineId);
        NotificationService.Notify(rs, "Deleted", "Failed to Delete");
        if (rs.IsFailed)
        {
            await RefreshAsync();
            return;
        }

        NavigationManager.NavigateTo("/");
    }

    /// <summary>
    /// Handle when user clicks inactivate button
    /// </summary>
    /// <param name="asOf"></param>
    private async Task OnInactivateAsync(DateTimeOffset asOf)
    {
        var rs = await FelineRepository.DeactivateAsync(FelineId, asOf);
        NotificationService.Notify(rs, "Deactivated", "Failed to Deactivate");
        await RefreshAsync();
    }

    /// <summary>
    /// Save event handler for the FelineEditForm
    /// </summary>
    private async Task OnSaveAsync(FelineEditModel model)
    {
        var rs = await FelineRepository.UpdateAsync(FelineId, model.ToFeline());
        NotificationService.Notify(rs, "Saved", "Failed to save");
        if (rs.IsSuccess)
        {
            _feline = rs.Value;
        }

        await RefreshAsync();
    }

}
