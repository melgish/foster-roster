@page "/fosterers"
@rendermode InteractiveWebAssembly
@implements IAsyncDisposable
@inject PersistentComponentState ComponentState
@inject IFostererRepository FostererRepository
@inject NavigationManager NavigationManager
@inject NotificationService NotificationService

<PageTitle>Fosterers</PageTitle>
<RadzenStack>
    <RadzenPanel class="rz-shadow-3">
        <FostererForm
            Fosterer="_fosterer"
            OnDelete="DeleteAsync"
            OnSave="SaveAsync"
        />
    </RadzenPanel>
    <RadzenPanel class="rz-p-0 rz-shadow-3">
        <FosterersGrid Items="_fosterers" OnAdd="@AddAsync" OnEdit="@EditAsync"/>
    </RadzenPanel>
</RadzenStack>

@code {
    private Fosterer _fosterer = new();
    private ICollection<Fosterer>? _fosterers = [];
    private IDisposable? _stateSubscription;

    private Task AddAsync()
    {
        _fosterer = new();
        return Task.CompletedTask;
    }

    private async Task DeleteAsync(int fostererId)
    {
        var rs = await FostererRepository.DeleteByKeyAsync(fostererId);
        NotificationService.Notify(rs, "Deleted Fosterer", "Failed to Delete Fosterer");
        if (rs.IsSuccess)
        {
            await RefreshAsync(0);
        }
    }

    public async ValueTask DisposeAsync()
    {
        if (_stateSubscription is IAsyncDisposable sub)
        {
            await sub.DisposeAsync();
        }
        else
        {
            _stateSubscription?.Dispose();
        }
    }

    private async Task EditAsync(int fostererId)
    {
        var rs = await FostererRepository.GetByKeyAsync(fostererId);
        if (rs.IsFailed)
        {
            NavigationManager.NavigateTo("/not-found");
            return;
        }

        _fosterer = rs.Value;
    }

    protected override async Task OnInitializedAsync()
    {
        _stateSubscription = ComponentState.RegisterOnPersisting(PersistStateAsync);
        ComponentState.TryTakeFromJson("fosterers", out _fosterers);
        _fosterers ??= (await FostererRepository.GetAllAsync()).ValueOrDefault ?? [];
        _fosterer = new();
        await base.OnInitializedAsync();
    }

    private Task PersistStateAsync()
    {
        ComponentState.PersistAsJson("fosterers", _fosterers);
        return Task.CompletedTask;
    }

    private async Task RefreshAsync(int fostererId)
    {
        _fosterers = (await FostererRepository.GetAllAsync()).ValueOrDefault ?? [];
        _fosterer = _fosterers.FirstOrDefault(e => e.Id == fostererId) ?? new();
    }

    private async Task SaveAsync(Fosterer fosterer)
    {
        var rs = fosterer.Id == 0
            ? await FostererRepository.AddAsync(fosterer)
            : await FostererRepository.UpdateAsync(fosterer.Id, fosterer);
        NotificationService.Notify(rs, "Saved Fosterer", "Failed to Save Fosterer");
        if (rs.IsSuccess)
        {
            await RefreshAsync(rs.Value.Id);
        }
    }

}