@inject NotificationService NotificationService
@inject ICommentRepository CommentRepository

<EditForm Model="@_model" OnValidSubmit="SaveAsync" FormName="newComment">
    <FluentValidationValidator/>
    <RadzenHtmlEditor @bind-Value="_model.Text">
        <RadzenHtmlEditorCustomTool>
            <Template Context="tool">
                <RadzenButton ButtonStyle="ButtonStyle.Primary"
                              ButtonType="ButtonType.Submit"
                              Disabled="tool.Disabled"
                              Icon="save"
                              Size="ButtonSize.Small"
                              Style="margin-top:0.125rem"
                              Variant="Variant.Flat"/>
            </Template>
        </RadzenHtmlEditorCustomTool>
        <RadzenHtmlEditorSeparator/>
        <RadzenHtmlEditorUndo/>
        <RadzenHtmlEditorRedo/>
        <RadzenHtmlEditorSeparator/>
        <RadzenHtmlEditorBold/>
        <RadzenHtmlEditorItalic/>
        <RadzenHtmlEditorSeparator/>
        <RadzenHtmlEditorAlignLeft/>
        <RadzenHtmlEditorAlignCenter/>
        <RadzenHtmlEditorAlignRight/>
        <RadzenHtmlEditorSeparator/>
        <RadzenHtmlEditorIndent/>
        <RadzenHtmlEditorOutdent/>
    </RadzenHtmlEditor>
    <ValidationMessage For="@(() => _model.Text)"/>
</EditForm>

@code
{
    private CommentEditModel _model = null!;

    [Parameter] public int FelineId { get; set; }

    [Parameter] public EventCallback<Comment> CommentAdded { get; set; }

    protected override void OnInitialized() => _model = new() { FelineId = FelineId };

    private async Task SaveAsync()
    {
        var rs = await CommentRepository.AddAsync(_model.ToComment());
        NotificationService.Notify(rs, "Comment saved", "Failed to save comment");
        if (rs.IsSuccess)
        {
            await CommentAdded.InvokeAsync(rs.Value);
            _model = new()
            {
                FelineId = FelineId
            };
        }
    }
}
