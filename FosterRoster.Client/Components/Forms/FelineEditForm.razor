@inject IDialogService DialogService

@if (_model is null)
{
    <Loading />
}
else
{
    <EditForm Model="@_model"
              OnValidSubmit="@SaveAsync"
              FormName="editFeline">
        <FluentValidationValidator />
        <MudGrid Spacing="3">
            <MudItem xs="12">
                <h1>@_name</h1>
            </MudItem>
            <MudItem xs="4">
                <MudFileUpload Accept="image/png"
                               Disabled="@_model.IsInactive"
                               FilesChanged="@OnFilesChangedAsync"
                               T="IBrowserFile">
                    <ActivatorContent>
                        <MudImage Alt="Thumbnail"
                                  Src="@_model.Thumbnail.GetUrl()"
                                  Height="256"
                                  Width="256" />
                        <MudIconButton Color="Color.Default"
                                       Disabled="@_model.IsInactive"
                                       Icon="@Icons.Material.Rounded.CameraAlt" />
                    </ActivatorContent>
                </MudFileUpload>
            </MudItem>
            <MudItem xs="8">
                <MudStack>
                    <MudDatePicker @bind-Date="_model.IntakeDate"
                                   Disabled="@_model.IsInactive"
                                   Editable="true"
                                   Label="Intake Date"
                                   Required
                                   RequiredError="" />
                    <ValidationMessage For="@(() => _model.IntakeDate)" />
                    <MudTextField @bind-Value="_model.Name"
                                  Disabled="@_model.IsInactive"
                                  Label="Name"
                                  ShrinkLabel />
                    <ValidationMessage For="@(() => _model.Name)" />
                    <MudField Label="Gender">
                        <MudRadioGroup T="Gender"
                                       @bind-Value="_model.Gender"
                                       Class="ps-2"
                                       Disabled="@_model.IsInactive"
                                       Style="margin-top:-0.5rem">
                            <MudRadio Dense
                                      Size="Size.Small"
                                      Value="@Gender.Female">Female</MudRadio>
                            <MudRadio Dense
                                      Size="Size.Small"
                                      Value="@Gender.Male">Male</MudRadio>
                        </MudRadioGroup>
                        <ValidationMessage For="@(() => _model.Gender)" />
                    </MudField>
                    <MudNumericField @bind-Value="_model.IntakeAgeInWeeks"
                                     Disabled="@_model.IsInactive"
                                     HideSpinButtons
                                     Label="Age at Intake (weeks)"
                                     Min="0"
                                     ShrinkLabel />
                    <ValidationMessage For="@(() => _model.IntakeAgeInWeeks)" />
                </MudStack>
            </MudItem>
            <MudItem xs="6">
                <MudTextField @bind-Value="_model.Breed"
                              Disabled="@_model.IsInactive"
                              Label="Breed" 
                              ShrinkLabel />
                <ValidationMessage For="@(() => _model.Breed)" />
            </MudItem>
            <MudItem xs="6">
                <MudTextField @bind-Value="_model.Color"
                              Disabled="@_model.IsInactive"
                              Label="Color"
                              ShrinkLabel />
                <ValidationMessage For="@(() => _model.Color)" />
            </MudItem>
            <MudItem xs="6">
                <SourceSelect @bind-Value="_model.SourceId"
                              Disabled="@_model.IsInactive" />
                <ValidationMessage For="@(() => _model.SourceId)" />
            </MudItem>
            <MudItem xs="6">
                <FostererSelect @bind-Value="_model.FostererId"
                              Disabled="@_model.IsInactive" />
                <ValidationMessage For="@(() => _model.FostererId)" />
            </MudItem>
            <MudItem xs="6">
                <MudSelect @bind-Value="_model.Category"
                           Disabled="@_model.IsInactive"
                           Label="Category"
                           Required>
                    <MudSelectItem Value="@Category.Kitten">Kitten</MudSelectItem>
                    <MudSelectItem Value="@Category.NursingKitten">Nursing Kitten</MudSelectItem>
                    <MudSelectItem Value="@Category.Cat">Cat</MudSelectItem>
                    <MudSelectItem Value="@Category.NursingCat">Nursing Cat</MudSelectItem>
                </MudSelect>
                <ValidationMessage For="@(() => _model.Category)" />
            </MudItem>
            <MudItem xs="6">
                <MudDatePicker @bind-Date="_model.RegistrationDate"
                               Clearable="true"
                               Disabled="@_model.IsInactive"
                               Editable="true"
                               Label="Registration Date" />
                <ValidationMessage For="@(() => _model.RegistrationDate)" />
            </MudItem>
            <MudItem xs="6">
                <MudField Label="Weaned">
                    <MudRadioGroup @bind-Value="_model.Weaned"
                                   Class="ps-2"
                                   Style="margin-top:-0.5rem"
                                   Disabled="@_model.IsInactive">
                        <MudRadio Dense
                                  Size="Size.Small"
                                  Value="@Weaned.No">No</MudRadio>
                        <MudRadio Dense
                                  Size="Size.Small"
                                  Value="@Weaned.InProgress">In Progress</MudRadio>
                        <MudRadio Dense
                                  Size="Size.Small"
                                  Value="@Weaned.Yes">Yes</MudRadio>
                    </MudRadioGroup>
                </MudField>
                <ValidationMessage For="@(() => _model.Weaned)" />
            </MudItem>
            <MudItem xs="12">
                <MudStack Row="true" AlignItems="AlignItems.Center">
                    @if (_model.IsInactive)
                    {
                        <MudText>
                            Inactive as of @_model.InactivatedAtUtc
                        </MudText>
                    }
                    <MudSpacer />
                    @if (_isSaving)
                    {
                        <MudProgressCircular Color="Color.Primary"
                                             Indeterminate="true"
                                             StrokeWidth="4" />
                    }
                    @if (!IsNew)
                    {
                        @if (_model.IsInactive)
                        {
                            <MudButton ButtonType="ButtonType.Button"
                                       Color="Color.Info"
                                       Disabled="@(_isSaving || !_model.IsInactive)"
                                       OnClick="@ActivateAsync"
                                       Variant="Variant.Outlined">Activate</MudButton>
                        }
                        else
                        {
                            <MudButton ButtonType="ButtonType.Button"
                                       Color="Color.Info"
                                       Disabled="@(_isSaving || _model.IsInactive)"
                                       OnClick="@InactivateAsync"
                                       Variant="Variant.Outlined">Inactivate</MudButton>
                        }
                        <MudButton ButtonType="ButtonType.Button"
                                   Color="Color.Error"
                                   Disabled="@(_isSaving || _model.IsInactive)"
                                   OnClick="@DeleteAsync"
                                   Variant="Variant.Outlined">Delete</MudButton>
                    }
                    <MudButton ButtonType="ButtonType.Submit"
                               Color="Color.Primary"
                               Disabled="@(_isSaving || _model.IsInactive)"
                               Variant="Variant.Outlined">Save</MudButton>

                    <MudButton Color="Color.Secondary"
                               Disabled="@(_isSaving || _model.IsInactive)"
                               OnClick="@ResetAsync"
                               Variant="Variant.Outlined">Reset</MudButton>
                </MudStack>
            </MudItem>
        </MudGrid>
    </EditForm>
}

@code {
    private bool _isSaving = false;
    private string _name = string.Empty;
    private FelineEditModel? _model = null;

    [Parameter]
    public Feline Feline { get; set; } = null!;

    [Parameter]
    public bool IsNew { get; set; }

    [Parameter]
    public EventCallback OnActivate { get; set; } = EventCallback.Empty;

    [Parameter]
    public EventCallback OnDelete { get; set; } = EventCallback.Empty;

    [Parameter]
    public EventCallback<DateTimeOffset> OnInactivate { get; set; } =
    EventCallback<DateTimeOffset>.Empty;

    [Parameter]
    public EventCallback<FelineEditModel> OnSave { get; set; } = EventCallback<FelineEditModel>.Empty;

    /// <summary>
    /// Re-activates an inactive cat.
    /// </summary>
    private async Task ActivateAsync()
    {
        _isSaving = true;
        await OnActivate.InvokeAsync();
        _isSaving = false;
    }

    /// <summary>
    /// Reset any time the parent Feline is updated.
    /// </summary>
    protected override async Task OnParametersSetAsync() => await ResetAsync();

    /// <summary>
    /// Deletes the current cat.
    /// </summary>
    private async Task DeleteAsync()
    {
        var parameters = new DialogParameters { { nameof(ConfirmDeleteFelineDialog.Model), _model } };

        var dialog = await DialogService
        .ShowAsync<ConfirmDeleteFelineDialog>("Confirm Delete", parameters);

        var result = await dialog.Result;
        if (result is null || result.Canceled)
        {
            return;
        }

        _isSaving = true;
        await OnDelete.InvokeAsync(Feline.Id);
        _isSaving = false;
    }

    /// <summary>
    /// Inactivates the current cat.
    /// </summary>
    private async Task InactivateAsync()
    {
        var parameters = new DialogParameters { { nameof(ConfirmInactivateFelineDialog.Feline), _model } };

        var dialog = await DialogService
        .ShowAsync<ConfirmInactivateFelineDialog>("Confirm Inactivate", parameters);
        var result = await dialog.Result;
        if (result is null || result.Canceled)
        {
            return;
        }

        _isSaving = true;
        await OnInactivate.InvokeAsync((DateTimeOffset)result.Data!);
        _isSaving = false;
    }

    private async Task OnFilesChangedAsync(IBrowserFile? file)
    {
        if (_model is not null && file is not null)
        {
            _model.Thumbnail = await file.ToThumbnailAsync(_model.Id);
        }
    }

    private Task ResetAsync()
    {
        _model = new FelineEditModel(Feline);
        _name = IsNew ? "Intake" : _model.Name;
        return Task.CompletedTask;
    }

    private async Task SaveAsync()
    {
        _isSaving = true;
        await OnSave.InvokeAsync(_model);
        _isSaving = false;
    }
}