@inject IDialogService DialogService

@if (_model is null)
{
    <Loading />
}
else
{
    <EditForm Model="_model" FormName="editFosterer" OnValidSubmit="SaveAsync">
        <FluentValidationValidator/>
        <MudGrid Spacing="3">
            <MudItem xs="12">
                <h1>@_name</h1>
            </MudItem>
            <MudItem xs="6">
                <MudTextField @bind-Value="_model.Name"
                              Disabled="@_model.IsInactive"
                              Label="Name"
                              ShrinkLabel/>
                <ValidationMessage For="@(() => _model.Name)"/>
            </MudItem>
            <MudItem xs="6">
                <MudTextField @bind-Value="_model.Phone"
                              Disabled="@_model.IsInactive"
                              Label="Phone"
                              Placeholder="000-000-0000"
                              Mask="@PhoneMask"
                              InputMode="InputMode.tel"/>
                <ValidationMessage For="@(() => _model.Phone)"/>
            </MudItem>
            <MudItem xs="6">
                <MudTextField @bind-Value="_model.Email"
                              Disabled="@_model.IsInactive"
                              Label="Email"
                              InputMode="InputMode.email"/>
                <ValidationMessage For="@(() => _model.Email)"/>
            </MudItem>
            <MudItem xs="6">
                <MudSelect @bind-Value="_model.ContactMethod"
                           Disabled="@_model.IsInactive"
                           Label="Contact Method"
                           Required>
                    <MudSelectItem Value="@ContactMethod.Email">@ContactMethod.Email</MudSelectItem>
                    <MudSelectItem Value="@ContactMethod.Text">@ContactMethod.Text</MudSelectItem>
                    <MudSelectItem Value="@ContactMethod.Voice">@ContactMethod.Voice</MudSelectItem>
                </MudSelect>
            </MudItem>
            <MudItem xs="6">
                <MudTextField @bind-Value="_model.Address"
                              Disabled="@_model.IsInactive"
                              Label="Address"
                              Lines="3"
                              MaxLines="5"
                              Placeholder="@("Name\nStreet\nCity, State Zip")"
                              ShrinkLabel/>
                <ValidationMessage For="@(() => _model.Address)"/>
            </MudItem>
            <MudItem xs="12">
                <MudStack Row>
                    <MudSpacer/>
                    @if (_isSaving)
                    {
                        <MudProgressCircular Color="Color.Primary"
                                             Indeterminate="true"
                                             StrokeWidth="4"/>
                    }
                    @if (!IsNew)
                    {
                        <MudButton ButtonType="ButtonType.Button"
                                   Color="Color.Error"
                                   Disabled="@(_isSaving || _model.IsInactive)"
                                   OnClick="@DeleteAsync"
                                   Variant="Variant.Outlined">
                            Delete
                        </MudButton>
                    }

                    <MudButton ButtonType="ButtonType.Submit"
                               Color="Color.Primary"
                               Disabled="@(_isSaving || _model.IsInactive)"
                               Variant="Variant.Outlined">
                        Save
                    </MudButton>

                    <MudButton Color="Color.Secondary"
                               Disabled="@(_isSaving || _model.IsInactive)"
                               OnClick="@ResetAsync"
                               Variant="Variant.Outlined">
                        Reset
                    </MudButton>
                </MudStack>
            </MudItem>
        </MudGrid>
    </EditForm>
}

@code {
    private bool _isSaving;
    private FostererEditModel? _model;
    private string _name = string.Empty;
    private static readonly PatternMask PhoneMask = new("000-000-0000");

    [Parameter] public Fosterer Fosterer { get; set; } = null!;

    [Parameter] public bool IsNew { get; set; }
    
    [Parameter]
    public EventCallback OnDelete { get; set; } = EventCallback.Empty;
    
    /// <summary>
    ///     Event fired when save button is clicked.
    /// </summary>
    [Parameter]
    public EventCallback<FostererEditModel> OnSave { get; set; } =
        EventCallback<FostererEditModel>.Empty;

    /// <summary>
    ///     Event fired when Add button is clicked.
    /// </summary>
    [Parameter]
    public EventCallback OnAdd { get; set; } = EventCallback.Empty;

    private Task ActivateAsync()
    {
        return Task.CompletedTask;
    }

    private async Task DeleteAsync()
    {
        var parameters = new DialogParameters { { nameof(ConfirmDeleteFostererDialog.Model), _model } };

        var dialog = await DialogService
            .ShowAsync<ConfirmDeleteFostererDialog>("Confirm Delete", parameters);

        var result = await dialog.Result;
        if (result is null || result.Canceled)
        {
            return;
        }

        _isSaving = true;
        await OnDelete.InvokeAsync(Fosterer.Id);
        _isSaving = false;
    }

    private Task InactivateAsync()
    {
        return Task.CompletedTask;
    }

    /// <summary>
    ///     Resets form any time the parent Feline is updated.
    /// </summary>
    protected override Task OnParametersSetAsync()
    {
        return ResetAsync();
    }

    /// <summary>
    ///     Resets the form back to it's initial state.
    /// </summary>
    /// <returns></returns>
    private Task ResetAsync()
    {
        _model = new FostererEditModel(Fosterer);
        _name = IsNew ? "Create Fosterer" : _model.Name;
        return Task.CompletedTask;
    }

    private async Task SaveAsync()
    {
        _isSaving = true;
        await OnSave.InvokeAsync(_model);
        _isSaving = false;
    }

}