@inject ISourceRepository SourceRepository;

<RadzenDropDown TValue="int"
                @attributes="@Attributes"
                Data="@_data"
                Disabled="@Disabled"
                TextProperty="@nameof(ListItem<int>.Name)"
                Value="@Value.GetValueOrDefault(Select.Id)"
                ValueChanged="@OnValueChanged"
                ValueProperty="@nameof(ListItem<int>.Id)"/>

@code {
    private static readonly ListItem<int> Select = new(0, "Select a source...");
    private List<ListItem<int>> _data = [Select];

    [Parameter(CaptureUnmatchedValues = true)]
    public Dictionary<string, object> Attributes { get; set; } = [];

    [Parameter] public bool Disabled { get; set; }

    [Parameter] public int? Value { get; set; }

    [Parameter] public EventCallback<int?> ValueChanged { get; set; }

    protected override async Task OnInitializedAsync()
    {
        _data = await SourceRepository.GetAllNamesAsync() switch
        {
            { IsSuccess: true } ok => ok.Value.Prepend(Select).ToList(),
            _ => [Select]
        };
        await base.OnInitializedAsync();
        // Without this call, the select will display the ID value instead
        // of the associated text.
        await InvokeAsync(StateHasChanged);
    }

    private void OnValueChanged(int value)
        => ValueChanged.InvokeAsync(value == 0 ? null : value);

}