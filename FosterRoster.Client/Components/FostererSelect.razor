@inject IFostererRepository FostererRepository

<MudSelect T="int" Label="Fosterer" Value="@_value" ValueChanged="@OnValueChanged" @attributes="@Attributes">
    <MudSelectItem Value="0">Select a fosterer...</MudSelectItem>
    @foreach (var name in _fosterers)
    {
    <MudSelectItem @key="@name.Value" Value="@name.Value">@name.Text</MudSelectItem>
    }
</MudSelect>

@code {
    private int _value = 0;
    private List<ListItem<int>> _fosterers = [];
    
    [Parameter(CaptureUnmatchedValues = true)]
    public Dictionary<string, object> Attributes { get; set; } = [];

    [Parameter] public EventCallback<int?> ValueChanged { get; set; }

    [Parameter] public int? Value { get; set; }

    protected override async Task OnInitializedAsync()
    {
        _fosterers = await FostererRepository.GetAllNamesAsync();
        await base.OnInitializedAsync();
        // Without this call, the select will display the ID value instead
        // of the associated text.
        await InvokeAsync(StateHasChanged);
    }

    private void OnValueChanged(int value)
    {
        ValueChanged.InvokeAsync(value == 0 ? null : value);
    }

    protected override void OnParametersSet()
    {
        _value = Value ?? 0;
    }
}