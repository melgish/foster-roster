@inject TimeProvider TimeProvider
@inject ILogger<CommentCard> Logger

@if (_model is null)
{
    <RadzenCard Variant="Variant.Outlined" class="rz-pt-1 rz-px-2">
        <RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" Gap="0.5rem">
            <RadzenButton ButtonStyle="ButtonStyle.Danger"
                          Click="@(() => OnDelete.InvokeAsync(Comment))"
                          Size="ButtonSize.Small"
                          Text="Delete"
                          Variant="Variant.Outlined"/>
            <RadzenButton ButtonStyle="ButtonStyle.Primary"
                          Click="@(() => _model = new(Comment))"
                          Size="ButtonSize.Small"
                          Text="Edit"
                          Variant="Variant.Outlined"/>
            <AppDateTimeAgo Value="@Comment.TimeStamp"/>
            @if (Comment.Modified.HasValue)
            {
                <AppDateTimeAgo Value="@Comment.Modified" Label="Revised"/>
            }
        </RadzenStack>
        <RadzenHtml>@_html</RadzenHtml>
    </RadzenCard>
}
else
{
    <CommentForm Model="_model"
                 OnCancel="@(() => _model = null)"
                 OnDelete="@(() => OnDelete.InvokeAsync(Comment))"
                 OnSave="@SaveAsync"/>
}

@code {
    [Parameter] public Comment Comment { get; set; } = null!;

    [Parameter] public EventCallback<Comment> OnDelete { get; set; }

    [Parameter] public EventCallback<Comment> OnSave { get; set; }

    private MarkupString? _html = null;
    private CommentEditModel? _model = null;

    protected override void OnParametersSet()
    {
        _html = new(Comment.Text);
        _model = null;
    }

    private async Task SaveAsync(CommentEditModel model)
    {
        await OnSave.InvokeAsync(model.ToComment());
        _model = null;
    }

}