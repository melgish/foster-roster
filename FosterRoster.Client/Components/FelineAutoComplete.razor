@inject IFelineRepository FelineRepository;
@inject ILogger<FelineAutoComplete> Logger;

<MudAutocomplete Clearable="true"
                 CoerceText="true"
                 Placeholder="Start typing or select a name..."
                 Label="Name"
                 SearchFunc="@SearchAsync"
                 Strict="false"
                 T="ListItem<int>"
                 ToStringFunc="@GetText"
                 Value="@_selectedValue"
                 ValueChanged="@OnValueChanged"
>
</MudAutocomplete>

@code {
    private ListItem<int>? _selectedValue = null;
    private List<ListItem<int>> _names = [];

    [Parameter] public int Value { get; set; }

    [Parameter] public EventCallback<int> ValueChanged { get; set; } = EventCallback<int>.Empty;

    private static string GetText(ListItem<int>? item) => item?.Text ?? string.Empty;

    protected override async Task OnInitializedAsync()
    {
        Value = 0;
        _names = (await FelineRepository.GetAllNamesAsync()).Value;
        await base.OnInitializedAsync();
    }

    protected override void OnParametersSet()
    {
        if (_selectedValue?.Value != Value)
        {
            _selectedValue = _names.FirstOrDefault(x => x.Value == Value);
        }
    }

    private IEnumerable<ListItem<int>> Search(string value)
        => value switch
        {
            var n when string.IsNullOrWhiteSpace(n) => _names.AsEnumerable(),
            _ => _names.Where(x => x.Text.Contains(value, StringComparison.OrdinalIgnoreCase))
        };

    private async Task<IEnumerable<ListItem<int>>> SearchAsync(string value, CancellationToken
        token)
        => await Task.Run(() => Search(value), token);

    private void OnValueChanged(ListItem<int>? value)
    {
        _selectedValue = value;
        Value = value?.Value ?? 0;
        ValueChanged.InvokeAsync(Value);
    }

}
