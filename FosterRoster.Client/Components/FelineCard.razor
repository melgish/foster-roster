@inject TimeProvider TimeProvider
@inject IFelineRepository FelineRepository
@inject ILogger<FelineCard> Logger

<div class="feline-card">
    @if (Feline is null)
    {
        <p>Loading...</p>
    }
    else
    {
        <MudCard Outlined="true"
                 Elevation="2"
                 Square="false"
                 data-id="@Feline.Id">
            <MudCardHeader>
                <CardHeaderContent>
                    <MudText Typo="Typo.h6">@Feline.Name</MudText>
                </CardHeaderContent>
                <CardHeaderActions>
                    <MudFileUpload T="IBrowserFile"
                                   FilesChanged="@OnFilesChangedAsync"
                                   Accept="image/*">
                        <ActivatorContent>
                            <MudIconButton Icon="@Icons.Material.Rounded.CameraAlt"
                                           Color="Color.Default"/>
                        </ActivatorContent>
                    </MudFileUpload>
                </CardHeaderActions>
            </MudCardHeader>
            <MudCardContent>
                <NavLink href=@($"/details/{Feline!.Id}")>
                    <MudCardMedia Height="180"
                                  Image="@Feline.Thumbnail.GetUrl()"/>
                </NavLink>
                <MudText Typo="Typo.body1">@Feline.Gender @Feline.Category</MudText>
                <MudText Typo="Typo.caption">@Feline.FormatAge(TimeProvider.GetUtcNow())</MudText>
            </MudCardContent>
        </MudCard>
    }
</div>

@code {
    /// <summary>
    /// Feline to display.
    /// </summary>
    [Parameter] public Feline? Feline { get; set; }
    
    /// <summary>
    /// Fired if Feline is updated.
    /// </summary>
    [Parameter] public EventCallback<Feline> FelineChanged { get; set; }

    private async Task OnFilesChangedAsync(IBrowserFile? file)
    {
        var thumbnail = await file.ToThumbnailAsync(Feline!.Id);
        if (thumbnail is not null)
        {
            var updated = await FelineRepository.SetThumbnailAsync(Feline.Id, thumbnail);
            if (updated != null)
            {
                Feline = updated;
                await FelineChanged.InvokeAsync(Feline);
            }
        }
    }
}