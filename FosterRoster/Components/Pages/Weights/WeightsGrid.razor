@inject IDbContextFactory<FosterRosterDbContext> DbContextFactory
@inject TimeProvider TimeProvider

<div class="weights-grid">
    <RadzenDataGrid
        @ref="_grid"
        TItem="WeightGridRow"
        AllowPaging="true"
        AllowSorting="true"
        Count="_count"
        Data="_data"
        Density="Density.Compact"
        IsLoading="_isLoading"
        LoadData="LoadDataAsync"
        PageNumbersCount="1"
        PagerHorizontalAlign="HorizontalAlign.Center"
        PagerPosition="PagerPosition.Top"
        PageSize="20"
        PageSizeOptions="@( [10, 20, 50, 100])"
        PagingSummaryFormat="Showing {0} to {1} of {2}"
        ShowPagingSummary="true">
        <HeaderTemplate>
            <RadzenStack
                AlignItems="AlignItems.Center"
                class="rz-w-100 rz-py-1 rz-px-2"
                JustifyContent="JustifyContent.SpaceBetween"
                Orientation="Orientation.Horizontal">
                <RadzenText Text="Weights" TextStyle="TextStyle.DisplayH6" Style="margin: 0"/>
            </RadzenStack>
        </HeaderTemplate>
        <Columns>
            <RadzenDataGridColumn
                Title="Actions"
                Sortable="false"
                Width="12ch">
                <Template>
                    <RadzenButton ButtonStyle="ButtonStyle.Danger"
                                  Click="@(() => DeleteAsync(context))"
                                  Size="ButtonSize.ExtraSmall"
                                  Text="Delete"
                                  Variant="Variant.Outlined"/>
                </Template>
            </RadzenDataGridColumn>
            <RadzenDataGridColumn Property="@nameof(WeightGridRow.DateTime)" Title="Date" Width="20ch">
                <Template Context="data">@data.DateTime.FormatLocalTime(TimeProvider)</Template>
            </RadzenDataGridColumn>
            <RadzenDataGridColumn Property="@nameof(WeightGridRow.Name)" Title="Name"/>
            <RadzenDataGridColumn
                HeaderCssClass="weights-column"
                Property="@nameof(WeightGridRow.Value)"
                Sortable="false"
                TextAlign="TextAlign.End"
                Title="Weight"
                Width="12ch">
                <Template Context="data">@data.Value.Format(data.Units, Units)</Template>
            </RadzenDataGridColumn>
        </Columns>
    </RadzenDataGrid>
</div>

@code {
    private int _count;
    private IEnumerable<WeightGridRow>? _data;
    private RadzenDataGrid<WeightGridRow>? _grid;
    private bool _isLoading;

    /// <summary>
    /// When non-0 will limit results to the specified feline.
    /// </summary>
    [Parameter]
    public int FelineId { get; set; }

    /// <summary>
    /// Invoked when delete button is pressed.
    /// </summary>
    [Parameter]
    public EventCallback<(int FelineId, DateTimeOffset DateTime)> OnDelete { get; set; }

    /// <summary>
    /// Determines what units to display in the weight column.
    /// </summary>
    [Parameter]
    public WeightUnit Units { get; set; }

    /// <summary>
    /// Data for a single row in the grid.
    /// </summary>
    private sealed record WeightGridRow
    {
        public int FelineId { get; init; }
        public DateTimeOffset DateTime { get; init; }
        public string Name { get; init; } = string.Empty;
        public float Value { get; init; }
        public WeightUnit Units { get; init; }
    }

    /// <summary>
    /// Raise event when delete button is pressed.
    /// </summary>
    /// <param name="row"></param>
    private async Task DeleteAsync(WeightGridRow row)
        => await OnDelete.InvokeAsync((row.FelineId, row.DateTime));

    /// <summary>
    /// Fetch data for the grid.
    /// </summary>
    /// <param name="args"></param>
    private async Task LoadDataAsync(LoadDataArgs args)
    {
        if (_grid is null) return;
        _isLoading = true;
        try
        {
            await using var context = await DbContextFactory.CreateDbContextAsync();
            var query = (
                FelineId == 0
                    ? context.Weights.AsNoTracking()
                    : context.Weights.AsNoTracking().Where(e => e.FelineId == FelineId)
            ).Select(w => new WeightGridRow()
            {
                FelineId = w.FelineId,
                DateTime = w.DateTime,
                Name = w.Feline.Name,
                Value = w.Value,
                Units = w.Units
            });

            (_data, _count) = await query.ToQueryResultsAsync(args, "DateTime desc");
        }
        finally
        {
            _isLoading = false;
        }
    }

    /// <summary>
    /// Reload data when FelineId is changed.
    /// </summary>
    /// <param name="parameters"></param>
    public override async Task SetParametersAsync(ParameterView parameters)
    {
        await base.SetParametersAsync(parameters);
        if (_grid is not null && parameters.TryGetValue<int>(nameof(FelineId), out _))
        {
            await _grid.Reload();
        }
    }

}