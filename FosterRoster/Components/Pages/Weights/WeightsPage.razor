@page "/weights"
@inject NotificationService NotificationService
@inject IWeightRepository WeightRepository
@inject TimeProvider TimeProvider

<PageTitle>Weights</PageTitle>

<RadzenStack>
    <RadzenPanel class="rz-shadow-3">
        <EditForm FormName="weightForm"
                  Model="_model"
                  OnValidSubmit="SaveAsync">
            <FluentValidationValidator/>
            <RadzenStack Gap="0.5rem">
                <AppFormHeader Text="Enter Weight"/>
                <AppFormRow>
                    <AppFormColumn>
                        <FelineSelect @bind-Value="@_model.FelineId"/>
                    </AppFormColumn>
                    <AppFormColumn>
                        <AppDateTime @bind-Value="_model.DateTime" Text="Date"/>
                    </AppFormColumn>
                </AppFormRow>
                <AppFormRow>
                    <AppFormColumn>
                        <AppNumeric @bind-Value="_model.Value" Min="0.0m" Step="0.1" Text="Weight" TValue="float"/>
                    </AppFormColumn>
                    <AppFormColumn>
                        <WeightUnitSelect @bind-Value="@_model.Units"/>
                    </AppFormColumn>
                </AppFormRow>
                <AppFormFooter>
                    <AppBusyCircle IsBusy="_isSaving"/>
                    <AppFormSaveButton Disabled="_isSaving"/>
                    <AppFormResetButton Click="Reset" Disabled="_isSaving"/>
                </AppFormFooter>
            </RadzenStack>
        </EditForm>
    </RadzenPanel>
    <RadzenPanel class="rz-p-0 rz-shadow-3">
        <WeightsGrid FelineId="_model.FelineId"
                     OnDelete="DeleteAsync"
                     Units="_model.Units"
        />
    </RadzenPanel>
</RadzenStack>

@code {
    private bool _isSaving;
    private WeightEditModel _model = new();

    protected override void OnInitialized()
    {
        Reset();
    }

    private void Reset()
    {
        // Start a new form, but keep the selected unit type
        _model = new()
        {
            DateTime = TimeProvider.GetUtcNow(),
            Units = _model.Units
        };
    }

    private async Task SaveAsync()
    {
        _isSaving = true;
        var rs = await WeightRepository.AddAsync(_model.ToWeight());
        NotificationService.Notify(rs, "Weight saved", "Failed to save weight");
        if (rs.IsSuccess)
        {
            Reset();
        }

        _isSaving = false;
    }

    private async Task DeleteAsync((int FelineId, DateTimeOffset DateTime) weight)
    {
        _isSaving = true;
        var rs = await WeightRepository.DeleteByKeyAsync(weight.FelineId, weight.DateTime);
        NotificationService.Notify(rs, "Weight deleted", "Failed to delete weight");

        _isSaving = false;
    }

}
