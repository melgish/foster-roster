@inject DialogService DialogService

<EditForm Model="_model" OnValidSubmit="SaveAsync">
    <FluentValidationValidator/>
    <RadzenStack Gap="0.5rem">
        <AppFormHeader Text="New Task"/>
        <AppFormRow>
            <AppFormColumn>
                <AppTextBox @bind-Value="@_model.Name" Text="Task Name"/>
            </AppFormColumn>
            <AppFormColumn>
                <FelineSelect @bind-Value="@_model.FelineId" Text="Feline Name"/>
            </AppFormColumn>
        </AppFormRow>
        <AppFormRow>
            <AppFormColumn SizeSM="12">
                <AppTextBox @bind-Value="@_model.Description" Text="Description"/>
            </AppFormColumn>
        </AppFormRow>
        <AppFormRow>
            <AppFormColumn>
                <AppNumeric @bind-Value="_model.Repeats" Text="Repeats"/>
            </AppFormColumn>
            <AppFormColumn>
                <FrequencySelect @bind-Value="@_model.Frequency"/>
            </AppFormColumn>
        </AppFormRow>
        <AppFormFooter>
            <AppBusyCircle IsBusy="_isSaving"/>
            @if (_model.Id != 0)
            {
                <AppFormDeleteButton @*Click="DeleteAsync"*@ Disabled="@_isSaving"/>
            }
            <AppFormSaveButton Disabled="@_isSaving"/>
            <AppFormResetButton Click="ResetAsync" Disabled="@_isSaving"/>
        </AppFormFooter>
    </RadzenStack>
</EditForm>

@code {
    private bool _isSaving;
    private ApplicationTaskEditModel _model = new();

    private async Task SaveAsync()
    {
        _isSaving = true;
        await Task.CompletedTask;
        // Save logic here
        _isSaving = false;
    }

    private Task ResetAsync()
    {
        _model = new();
        return Task.CompletedTask;
    }

}
