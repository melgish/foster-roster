@inject DialogService DialogService

@if (_model is null)
{
    <AppLoading/>
}
else
{
    <EditForm FormName="editFosterer" Model="_model" OnValidSubmit="SaveAsync">
        <FluentValidationValidator/>
        <RadzenStack Gap="0.5rem">
            <AppFormHeader Text="@_name"/>
            <AppFormRow>
                <AppFormColumn>
                    <AppTextBox @bind-Value="_model.Name" Text="Name"/>
                </AppFormColumn>
                <AppFormColumn>
                    <AppMaskInput
                        @bind-Value="_model.Phone"
                        CharacterPattern="[0-9]"
                        Mask="***-***-****"
                        Placeholder="000-000-0000"
                        Text="Phone"/>
                </AppFormColumn>
            </AppFormRow>
            <AppFormRow>
                <AppFormColumn>
                    <AppTextBox @bind-Value="_model.Email" Text="Email"/>
                </AppFormColumn>
                <AppFormColumn>
                    <ContactMethodSelect @bind-Value="_model.ContactMethod"/>
                </AppFormColumn>
            </AppFormRow>
            <AppFormRow>
                <AppFormColumn>
                    <AppTextArea @bind-Value="_model.Address" Placeholder="@("Name\nStreet\nCity, State Zip")"/>
                </AppFormColumn>
            </AppFormRow>
            <AppFormFooter>
                <AppBusyCircle IsBusy="_isSaving"/>
                @if (Fosterer.Id != 0)
                {
                    <AppFormDeleteButton Click="DeleteAsync" Disabled="_isSaving"/>
                }
                <AppFormSaveButton Disabled="_isSaving"/>
                <AppFormResetButton Click="ResetAsync" Disabled="_isSaving"/>
            </AppFormFooter>
        </RadzenStack>
    </EditForm>
}

@code {

    // must be Enum[] for RadzenDropDown to use Display Attribute instead of numeric values.
    private static readonly Enum[] ContactMethodChoices =
        [ContactMethod.Email, ContactMethod.Text, ContactMethod.Voice];

    private bool _isSaving;
    private FostererEditModel? _model;
    private string _name = string.Empty;

    /// <summary>
    ///     Fosterer to edit.
    /// </summary>
    [EditorRequired]
    [Parameter]
    public Fosterer Fosterer { get; set; } = null!;

    /// <summary>
    ///     Event fired when delete button is clicked
    /// </summary>
    [Parameter]
    public EventCallback<int> OnDelete { get; set; }

    /// <summary>
    ///     Event fired when save button is clicked.
    /// </summary>
    [Parameter]
    public EventCallback<Fosterer> OnSave { get; set; }

    /// <summary>
    ///     Handles click event for the delete button.
    /// </summary>
    private async Task DeleteAsync()
    {
        var rs = await DialogService
            .Confirm($"Are you sure you want to delete fosterer named \"{Fosterer.Name}\"?");
        if (rs.GetValueOrDefault())
        {
            _isSaving = true;
            await OnDelete.InvokeAsync(Fosterer.Id);
            _isSaving = false;
        }
    }

    /// <summary>
    ///     Resets form any time the parent Feline is updated.
    /// </summary>
    protected override Task OnParametersSetAsync() => ResetAsync();

    /// <summary>
    ///     Resets the form back to it's initial state.
    /// </summary>
    /// <returns></returns>
    private Task ResetAsync()
    {
        _model = new(Fosterer);
        _name = Fosterer.Id == 0 ? "Create New Fosterer" : _model.Name;
        return Task.CompletedTask;
    }

    private async Task SaveAsync()
    {
        if (_model is not null)
        {
            _isSaving = true;
            await OnSave.InvokeAsync(_model.ToFosterer());
            _isSaving = false;
        }
    }

}