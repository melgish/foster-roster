@inject DialogService DialogService

@if (_model is null)
{
    <AppLoading/>
}
else
{
    <EditForm Model="_model" OnValidSubmit="SaveAsync">
        <FluentValidationValidator/>
        <RadzenStack Gap="0.5rem">
            <AppFormHeader Text="New Task"/>
            <AppFormRow>
                <AppFormColumn>
                    <AppTextBox @bind-Value="@_model.Name" Text="Task Name"/>
                </AppFormColumn>
                <AppFormColumn>
                    <FelineSelect
                        @bind-Value="_model.FelineId"
                        Disabled="_isSaving"
                        Placeholder="Create Template"
                        Text="Feline Name (leave blank to create template)"/>
                </AppFormColumn>
            </AppFormRow>
            <AppFormRow>
                <AppFormColumn SizeSM="12">
                    <AppTextBox @bind-Value="@_model.Description" Text="Description"/>
                </AppFormColumn>
            </AppFormRow>
            <AppFormRow>
                <AppFormColumn>
                    <AppNumeric @bind-Value="_model.Repeats" Text="Repeats"/>
                </AppFormColumn>
                <AppFormColumn>
                    <FrequencySelect @bind-Value="@_model.Frequency" Disabled="_isSaving"/>
                </AppFormColumn>
            </AppFormRow>
            <AppFormFooter>
                <AppBusyCircle IsBusy="_isSaving"/>
                @if (_model.Id != 0)
                {
                    <AppFormDeleteButton Click="DeleteAsync" Disabled="_isSaving"/>
                }
                <AppFormSaveButton Disabled="_isSaving"/>
                <AppFormResetButton Click="ResetAsync" Disabled="_isSaving"/>
            </AppFormFooter>
        </RadzenStack>
    </EditForm>
}

@code {
    private bool _isSaving;
    private string _name = string.Empty;
    private ChoreEditModel? _model;

    /// <summary>
    ///     Chore to edit.
    /// </summary>
    [Parameter, EditorRequired] public Chore Chore { get; set; } = null!;
    
    /// <summary>
    ///     Event fired when delete button is clicked.
    /// </summary>
    [Parameter]
    public EventCallback<int> OnDelete { get; set; }

    /// <summary>
    ///     Event fired when save button is clicked.
    /// </summary>
    [Parameter]
    public EventCallback<Chore> OnSave { get; set; }

    /// <summary>
    ///     Handles click event for the delete button.
    /// </summary>
    private async Task DeleteAsync()
    {
        var rs = await DialogService
            .Confirm($"Are you sure you want to delete the task named \"{Chore.Name}\"?");
        if (rs.GetValueOrDefault())
        {
            _isSaving = true;
            await OnDelete.InvokeAsync(Chore.Id);
            _isSaving = false;
        }
    }
    
    /// <summary>
    ///     Resets form any time the parent Chore is updated.
    /// </summary>
    protected override Task OnParametersSetAsync() => ResetAsync();

    /// <summary>
    ///     Resets the form back to it's initial state.
    /// </summary>
    private Task ResetAsync()
    {
        _model = new(Chore);
        _name = Chore.Id == 0 ? "Create New Task" : Chore.Name;
        return Task.CompletedTask;
    }

    /// <summary>
    ///     Saves the current task
    /// </summary>
    private async Task SaveAsync()
    {
        if (_model is not null)
        {
            _isSaving = true;
            await OnSave.InvokeAsync(_model.ToChore());
            _isSaving = false;
        }
    }
}
