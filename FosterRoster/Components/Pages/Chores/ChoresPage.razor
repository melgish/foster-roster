@page "/tasks"
@inject IChoresRepository ChoreRepository;
@inject NavigationManager NavigationManager;
@inject NotificationService NotificationService;

<PageTitle>Tasks</PageTitle>
<RadzenStack>
    <RadzenPanel class="rz-shadow-3">
        <ChoreForm Chore="_chore"/>
    </RadzenPanel>
    <RadzenPanel class="rz-p-0 rz-shadow-3">
        
    </RadzenPanel>
</RadzenStack>

@code {
    private Chore _chore = new();
    private ICollection<Chore>? _chores = [];
    
    /// <summary>
    ///     Add a new chore.
    /// </summary>
    private Task AddAsync()
    {
        _chore = new();
        return Task.CompletedTask;
    }

    /// <summary>
    ///     Delete an existing chore identified by its ID.
    /// </summary>
    /// <param name="choreId">ID of chore to delete.</param>
    private async Task DeleteAsync(int choreId)
    {
        var rs = await ChoreRepository.DeleteByKeyAsync(choreId);
        NotificationService.Notify(rs, "Deleted task", "Failed to delete task");
        if (rs.IsSuccess)
        {
            // TODO
        }        
    }
    
}