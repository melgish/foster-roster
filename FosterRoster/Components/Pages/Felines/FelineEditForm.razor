@inject DialogService DialogService

@if (_model is null)
{
    <Loading/>
}
else
{
    <EditForm FormName="editFeline"
              Model="@_model"
              OnValidSubmit="@SaveAsync">
        <FluentValidationValidator/>
        <RadzenStack Gap="0.5rem">
            <RadzenRow Gap="1rem" RowGap="0.5rem">
                <RadzenColumn Size="12">
                    <RadzenText Text="@_name" TextStyle="TextStyle.DisplayH4"/>
                </RadzenColumn>
            </RadzenRow>
            <RadzenRow Gap="1rem" RowGap="0.5rem">
                <RadzenColumn SizeSM="6" SizeXS="12">
                    <RadzenStack JustifyContent="JustifyContent.SpaceAround" Orientation="Orientation.Horizontal">
                        <AppThumbnail
                            Path="@_model.Thumbnail.GetUrl()"
                            disabled="@_model.IsInactive"
                            OnChange="OnFilesChangedAsync"/>
                    </RadzenStack>
                </RadzenColumn>
                <RadzenColumn SizeSM="6" SizeXS="12">
                    <RadzenStack Gap="1rem">
                        <RadzenStack Gap="0rem">
                            <RadzenFormField
                                AllowFloatingLabel="false"
                                Text="Intake Date"
                                Variant="Variant.Text">
                                <RadzenDatePicker @bind-Value="_model.IntakeDate"
                                                  Disabled="@_model.IsInactive"
                                                  Placeholder="mm/dd/yyyy"/>
                            </RadzenFormField>
                            <ValidationMessage For="@(() => _model.IntakeDate)"/>
                        </RadzenStack>
                        <RadzenStack Gap="0rem">
                            <RadzenFormField
                                AllowFloatingLabel="false"
                                Text="Name" Variant="Variant.Text">

                                <RadzenTextBox @bind-Value="_model.Name"
                                               Disabled="@_model.IsInactive"/>
                            </RadzenFormField>
                            <ValidationMessage For="@(() => _model.Name)"/>
                        </RadzenStack>
                        <RadzenStack Gap="0rem">
                            <RadzenFormField
                                AllowFloatingLabel="false"
                                Text="Gender"
                                Variant="Variant.Text">
                                <RadzenRadioButtonList TValue="Gender" @bind-Value="_model.Gender"
                                                       Disabled="@_model.IsInactive"
                                                       class="rz-pt-3">
                                    <Items>
                                        <RadzenRadioButtonListItem Text="Female" Value="@Gender.Female"
                                                                   TValue="Gender"/>
                                        <RadzenRadioButtonListItem Text="Male" Value="@Gender.Male" TValue="Gender"/>
                                    </Items>
                                </RadzenRadioButtonList>
                            </RadzenFormField>
                            <ValidationMessage For="@(() => _model.Gender)"/>
                        </RadzenStack>
                        <RadzenStack Gap="0rem">
                            <RadzenFormField
                                AllowFloatingLabel="false"
                                Text="Age at Intake (weeks)" Variant="Variant.Text">
                                <RadzenNumeric @bind-Value="_model.IntakeAgeInWeeks"
                                               Disabled="@_model.IsInactive"
                                               Min="0"
                                               ShowUpDown="false"/>
                            </RadzenFormField>
                            <ValidationMessage For="@(() => _model.IntakeAgeInWeeks)"/>
                        </RadzenStack>
                    </RadzenStack>
                </RadzenColumn>
            </RadzenRow>
            <RadzenRow Gap="1rem" RowGap="0.5rem">
                <RadzenColumn SizeSM="6" SizeXS="12">
                    <RadzenStack Gap="0rem">
                        <RadzenFormField AllowFloatingLabel="false" Text="Breed" Variant="Variant.Text">
                            <RadzenTextBox @bind-Value="_model.Breed"
                                           Disabled="@_model.IsInactive"/>
                        </RadzenFormField>
                        <ValidationMessage For="@(() => _model.Breed)"/>
                    </RadzenStack>
                </RadzenColumn>
                <RadzenColumn SizeSM="6" SizeXS="12">
                    <RadzenStack Gap="0rem">
                        <RadzenFormField AllowFloatingLabel="false" Text="Color" Variant="Variant.Text">
                            <RadzenTextBox @bind-Value="_model.Color"
                                           Disabled="@_model.IsInactive"/>
                        </RadzenFormField>
                        <ValidationMessage For="@(() => _model.Color)"/>
                    </RadzenStack>
                </RadzenColumn>
            </RadzenRow>
            <RadzenRow Gap="1rem" RowGap="0.5rem">
                <RadzenColumn SizeSM="6" SizeXS="12">
                    <RadzenStack Gap="0rem">
                        <RadzenFormField AllowFloatingLabel="false" Text="Source" Variant="Variant.Text">
                            <SourceSelect @bind-Value="_model.SourceId"
                                          Disabled="@_model.IsInactive"/>
                        </RadzenFormField>
                        <ValidationMessage For="@(() => _model.SourceId)"/>
                    </RadzenStack>
                </RadzenColumn>
                <RadzenColumn SizeSM="6" SizeXS="12">
                    <RadzenStack Gap="0rem">
                        <RadzenFormField AllowFloatingLabel="false" Text="Fosterer" Variant="Variant.Text">
                            <FostererSelect @bind-Value="_model.FostererId"
                                            Disabled="@_model.IsInactive"/>
                            <ValidationMessage For="@(() => _model.FostererId)"/>
                        </RadzenFormField>
                    </RadzenStack>
                </RadzenColumn>
            </RadzenRow>
            <RadzenRow Gap="1rem" RowGap="0.5rem">
                <RadzenColumn SizeSM="6" SizeXS="12">
                    <RadzenStack Gap="0rem">
                        <RadzenFormField AllowFloatingLabel="false" Text="Category" Variant="Variant.Text">
                            <RadzenDropDown @bind-Value="_model.Category" Data="@CategoryChoices"/>
                        </RadzenFormField>
                        <ValidationMessage For="@(() => _model.Category)"/>
                    </RadzenStack>
                </RadzenColumn>
                <RadzenColumn SizeSM="6" SizeXS="12">
                    <RadzenStack Gap="0rem">
                        <RadzenFormField AllowFloatingLabel="false" Text="Registration Date" Variant="Variant.Text">
                            <RadzenDatePicker @bind-Value="_model.RegistrationDate"
                                              Disabled="@_model.IsInactive"
                                              Placeholder="mm/dd/yyyy"/>
                        </RadzenFormField>
                        <ValidationMessage For="@(() => _model.RegistrationDate)"/>
                    </RadzenStack>
                </RadzenColumn>
            </RadzenRow>
            <RadzenRow Gap="1rem" RowGap="0.5rem">
                <RadzenColumn SizeSM="6" SizeXS="12">
                    <RadzenStack Gap="0rem">
                        <RadzenFormField AllowFloatingLabel="false" Text="Animal ID" Variant="Variant.Text">
                            <RadzenTextBox @bind-Value="_model.AnimalId"
                                           Disabled="@_model.IsInactive"/>
                        </RadzenFormField>
                        <ValidationMessage For="@(() => _model.AnimalId)"/>
                    </RadzenStack>
                </RadzenColumn>
                <RadzenColumn SizeSM="6" SizeXS="12">
                    <RadzenStack Gap="0rem">
                        <RadzenFormField
                            AllowFloatingLabel="false"
                            Text="Weaned"
                            Variant="Variant.Text">
                            <RadzenRadioButtonList TValue="Weaned" @bind-Value="_model.Weaned"
                                                   Disabled="@_model.IsInactive"
                                                   class="rz-pt-3">
                                <Items>
                                    <RadzenRadioButtonListItem Text="No" Value="@Weaned.No" TValue="Weaned"/>
                                    <RadzenRadioButtonListItem Text="In Progress" Value="@Weaned.InProgress"
                                                               TValue="Weaned"/>
                                    <RadzenRadioButtonListItem Text="Yes" Value="@Weaned.Yes" TValue="Weaned"/>
                                </Items>
                            </RadzenRadioButtonList>
                        </RadzenFormField>
                        <ValidationMessage For="@(() => _model.Weaned)"/>
                    </RadzenStack>
                </RadzenColumn>
            </RadzenRow>
            <RadzenRow Gap="1rem" RowGap="0.5rem">
                <RadzenColumn Size="12">
                    <AppFormButtons
                        Busy="_isSaving"
                        CanDelete="Feline.Id != 0"
                        Disabled="_model.IsInactive"
                        OnDelete="DeleteAsync"
                        OnReset="ResetAsync">
                        @if (_model.IsInactive)
                        {
                            <AppDateTimeAgo Value="_model.InactivatedAtUtc" Label="Inactive since"/>
                            <RadzenButton ButtonStyle="ButtonStyle.Info"
                                          Click="@ActivateAsync"
                                          Disabled="@(_isSaving || !_model.IsInactive)"
                                          Size="ButtonSize.Small"
                                          Text="Activate"
                                          Variant="Variant.Outlined"/>
                        }
                        else
                        {
                            <RadzenButton ButtonStyle="ButtonStyle.Info"
                                          Click="@InactivateAsync"
                                          Disabled="@(_isSaving || _model.IsInactive)"
                                          Size="ButtonSize.Small"
                                          Text="Inactivate"
                                          Variant="Variant.Outlined"/>
                        }
                        @if (Feline.Id != 0)
                        {
                            <RadzenButton
                                ButtonStyle="ButtonStyle.Secondary"
                                Click="@PrintAsync"
                                Disabled="_isSaving"
                                Size="ButtonSize.Small"
                                Text="Print"
                                Variant="Variant.Outlined"/>
                        }
                    </AppFormButtons>
                </RadzenColumn>
            </RadzenRow>
        </RadzenStack>
    </EditForm>
}

@code {

    // must be Enum[] for RadzenDropDown to use Display Attribute instead of numeric values.
    private static readonly Enum[] CategoryChoices =
        [Category.Cat, Category.NursingCat, Category.Kitten, Category.NursingKitten];

    private bool _isSaving = false;
    private string _name = string.Empty;
    private FelineEditModel? _model = null;

    [EditorRequired] [Parameter] public Feline Feline { get; set; } = null!;

    [Parameter] public bool IsNew { get; set; }

    [Parameter] public EventCallback OnActivate { get; set; } = EventCallback.Empty;

    [Parameter] public EventCallback OnDelete { get; set; } = EventCallback.Empty;

    [Parameter]
    public EventCallback<DateTimeOffset> OnInactivate { get; set; } =
        EventCallback<DateTimeOffset>.Empty;

    [Parameter] public EventCallback<FelineEditModel> OnSave { get; set; } = EventCallback<FelineEditModel>.Empty;

    /// <summary>
    /// Re-activates an inactive cat.
    /// </summary>
    private async Task ActivateAsync()
    {
        _isSaving = true;
        await OnActivate.InvokeAsync();
        _isSaving = false;
    }

    /// <summary>
    /// Reset any time the parent Feline is updated.
    /// </summary>
    protected override async Task OnParametersSetAsync() => await ResetAsync();

    /// <summary>
    /// Deletes the current cat.
    /// </summary>
    private async Task DeleteAsync()
    {
        var parameters = new Dictionary<string, object>
        {
            { nameof(ConfirmDeleteFelineDialog.Model), _model! }
        };

        bool result = await DialogService
            .OpenAsync<ConfirmDeleteFelineDialog>("Confirm Delete", parameters);
        if (result)
        {
            _isSaving = true;
            await OnDelete.InvokeAsync(Feline.Id);
            _isSaving = false;
        }
    }

    /// <summary>
    /// Inactivates the current cat.
    /// </summary>
    private async Task InactivateAsync()
    {
        var parameters = new Dictionary<string, object>()
        {
            { nameof(ConfirmInactivateFelineDialog.Feline), _model! }
        };

        DateTimeOffset? result = await DialogService
            .OpenAsync<ConfirmInactivateFelineDialog>("Confirm Inactivate", parameters);
        if (result.HasValue)
        {
            _isSaving = true;
            await OnInactivate.InvokeAsync(result.Value);
            _isSaving = false;
        }
    }

    private async Task OnFilesChangedAsync(InputFileChangeEventArgs args)
    {
        if (_model is not null)
        {
            _model.Thumbnail = await args.File.ToThumbnailAsync(_model.Id);
        }
    }

    private async Task PrintAsync()
    {
        var parameters = new Dictionary<string, object>()
        {
            { nameof(PrintOptionsDialog.FelineId), _model!.Id }
        };

        await DialogService.OpenAsync<PrintOptionsDialog>("Print Settings", parameters);
    }

    private Task ResetAsync()
    {
        _model = new(Feline);
        _name = IsNew ? "Intake" : _model.Name;
        return Task.CompletedTask;
    }

    private async Task SaveAsync()
    {
        _isSaving = true;
        await OnSave.InvokeAsync(_model);
        _isSaving = false;
    }

}