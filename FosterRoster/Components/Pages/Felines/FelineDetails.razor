@page "/felines/{FelineId:int}"
@implements IDisposable
@inject ICommentRepository CommentRepository
@inject PersistentComponentState ComponentState
@inject IFelineRepository FelineRepository
@inject NavigationManager NavigationManager
@inject NotificationService NotificationService

<PageTitle>Details: @Name</PageTitle>
@if (_feline is null)
{
    <AppLoading/>
}
else
{
    <RadzenStack>
        <RadzenPanel class="rz-shadow-3">
            <FelineForm Feline="@_feline"
                        OnActivate="OnActivateAsync"
                        OnDelete="DeleteFelineAsync"
                        OnInactivate="OnInactivateAsync"
                        OnSave="SaveFelineAsync"/>
        </RadzenPanel>
        <RadzenPanel class="rz-p-0 rz-shadow-3">
            <RadzenTabs>
                <Tabs>
                    <RadzenTabsItem Text="Journal" Icon="edit">
                        <RadzenStack Gap="0.75rem" Style="margin:-1rem;">
                            <CommentForm OnSave="AddCommentAsync" Model="@_newComment"/>
                            @foreach (var comment in _feline.Comments)
                            {
                                <CommentCard
                                    @key="comment.Id"
                                    Comment="comment"
                                    OnSave="UpdateCommentAsync"
                                    OnDelete="DeleteCommentAsync"/>
                            }
                        </RadzenStack>
                    </RadzenTabsItem>
                    <RadzenTabsItem Text="Medical">
                        <RadzenText Text="Medical"/>
                    </RadzenTabsItem>
                    <RadzenTabsItem Text="TBD?"></RadzenTabsItem>
                </Tabs>
            </RadzenTabs>
        </RadzenPanel>
    </RadzenStack>
}

@code {
    private IDisposable? _stateSubscription;
    private Feline? _feline;
    private CommentEditModel? _newComment;

    private string Name => _feline?.Name ?? string.Empty;

    [Parameter] public int FelineId { get; set; }

    private async Task<Feline?> LoadAsync()
        => (await FelineRepository.GetByKeyAsync(FelineId)).ValueOrDefault;

    /// <summary>
    ///     Delete the supplied comment from the current feline.
    /// </summary>
    /// <param name="comment">Comment to delete</param>
    async Task DeleteCommentAsync(Comment comment)
    {
        var rs = await CommentRepository.DeleteByKeyAsync(comment.Id);
        NotificationService.Notify(rs, "Comment Deleted", "Failed to delete comment");
        if (rs.IsSuccess)
        {
            _feline!.Comments = _feline.Comments.Where(c => c.Id != comment.Id).ToArray();
        }
    }

    protected override async Task OnInitializedAsync()
    {
        _stateSubscription = ComponentState.RegisterOnPersisting(PersistStateAsync);
        ComponentState.TryTakeFromJson("feline", out _feline);
        _feline ??= await LoadAsync();
        if (_feline is null)
        {
            NavigationManager.NavigateTo("/not-found");
        }

        _newComment = new() { FelineId = FelineId };
    }

    private Task PersistStateAsync()
    {
        ComponentState.PersistAsJson("feline", _feline);
        return Task.CompletedTask;
    }

    private async Task RefreshAsync()
        => _feline = await LoadAsync();

    public void Dispose() => _stateSubscription?.Dispose();

    /// <summary>
    ///     Handle when user clicks activate button.
    /// </summary>
    private async Task OnActivateAsync()
    {
        var rs = await FelineRepository.ActivateAsync(FelineId);
        NotificationService.Notify(rs, "Activated", "Failed to Activate");
        await RefreshAsync();
    }

    /// <summary>
    ///     Handle when user clicks delete button.
    /// </summary>
    private async Task DeleteFelineAsync()
    {
        var rs = await FelineRepository.DeleteByKeyAsync(FelineId);
        NotificationService.Notify(rs, "Deleted", "Failed to Delete");
        if (rs.IsFailed)
        {
            await RefreshAsync();
            return;
        }

        NavigationManager.NavigateTo("/");
    }

    /// <summary>
    ///     Handle when user clicks inactivate button
    /// </summary>
    /// <param name="asOf"></param>
    private async Task OnInactivateAsync(DateTimeOffset asOf)
    {
        var rs = await FelineRepository.DeactivateAsync(FelineId, asOf);
        NotificationService.Notify(rs, "Deactivated", "Failed to Deactivate");
        await RefreshAsync();
    }

    /// <summary>
    ///     Save event handler for the FelineForm
    /// </summary>
    private async Task SaveFelineAsync(FelineEditModel model)
    {
        var rs = await FelineRepository.UpdateAsync(FelineId, model.ToFeline());
        NotificationService.Notify(rs, "Saved", "Failed to save");
        if (rs.IsSuccess)
        {
            _feline = rs.Value;
        }

        await RefreshAsync();
    }

    /// <summary>
    ///     Add a new comment to the current feline.
    /// </summary>
    /// <param name="model"></param>
    private async Task AddCommentAsync(CommentEditModel model)
    {
        var rs = await CommentRepository.AddAsync(model.ToComment());
        NotificationService.Notify(rs, "Comment Added", "Failed to add comment");
        if (rs.IsSuccess)
        {
            _feline!.Comments = _feline.Comments.Prepend(rs.Value).ToArray();
            _newComment = new() { FelineId = FelineId };
        }
    }

    private async Task UpdateCommentAsync(Comment comment)
    {
        var rs = await CommentRepository.UpdateAsync(comment.Id, comment);
        NotificationService.Notify(rs, "Comment Updated", "Failed to update comment");
        if (rs.IsSuccess)
        {
            _feline!.Comments = _feline.Comments.Select(c => c.Id == rs.Value.Id ? rs.Value : c).ToArray();
            await InvokeAsync(StateHasChanged);
        }
    }

}
