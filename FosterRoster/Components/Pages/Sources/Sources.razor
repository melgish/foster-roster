@page "/sources"
@implements IAsyncDisposable
@inject PersistentComponentState ComponentState
@inject ISourceRepository SourceRepository
@inject NavigationManager NavigationManager
@inject NotificationService NotificationService

<PageTitle>Sources</PageTitle>
<RadzenStack>
    <RadzenPanel class="rz-shadow-3">
        <SourceForm
            Source="_source"
            OnDelete="DeleteAsync"
            OnSave="SaveAsync"
        />
    </RadzenPanel>
    <RadzenPanel class="rz-p-0 rz-shadow-3">
        <SourcesGrid Items="_sources" OnAdd="AddAsync" OnEdit="EditAsync"/>
    </RadzenPanel>
</RadzenStack>

@code {
    private Source _source = new();
    private ICollection<Source>? _sources = [];
    private IDisposable? _stateSubscription;

    private Task AddAsync()
    {
        _source = new();
        return Task.CompletedTask;
    }

    private async Task DeleteAsync(int sourceId)
    {
        var rs = await SourceRepository.DeleteByKeyAsync(sourceId);
        NotificationService.Notify(rs, "Deleted source", "Failed to delete source");
        if (rs.IsSuccess)
        {
            await RefreshAsync(0);
        }
    }

    public async ValueTask DisposeAsync()
    {
        if (_stateSubscription is IAsyncDisposable sub)
        {
            await sub.DisposeAsync();
        }
        else
        {
            _stateSubscription?.Dispose();
        }
    }

    private async Task EditAsync(int sourceId)
    {
        var rs = await SourceRepository.GetByKeyAsync(sourceId);
        if (rs.IsFailed)
        {
            NavigationManager.NavigateTo("/not-found");
            return;
        }

        _source = rs.Value;
    }

    protected override async Task OnInitializedAsync()
    {
        _stateSubscription = ComponentState.RegisterOnPersisting(PersistStateAsync);
        ComponentState.TryTakeFromJson("sources", out _sources);
        _sources ??= (await SourceRepository.GetAllAsync()).ValueOrDefault ?? [];
        _source = new();
        await base.OnInitializedAsync();
    }

    private Task PersistStateAsync()
    {
        ComponentState.PersistAsJson("sources", _sources);
        return Task.CompletedTask;
    }

    private async Task RefreshAsync(int sourceId)
    {
        _sources = (await SourceRepository.GetAllAsync()).ValueOrDefault ?? [];
        _source = _sources.FirstOrDefault(e => e.Id == sourceId) ?? new();
    }

    private async Task SaveAsync(Source source)
    {
        var rs = source.Id == 0
            ? await SourceRepository.AddAsync(source)
            : await SourceRepository.UpdateAsync(source.Id, source);
        NotificationService.Notify(rs, "Saved source", "Failed to save source");
        if (rs.IsSuccess)
        {
            await RefreshAsync(rs.Value.Id);
        }
    }

}