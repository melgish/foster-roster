@page "/sources"
@page "/sources/{sourceId:int}"
@rendermode @(new InteractiveServerRenderMode(false))
@inject ISourceRepository SourceRepository
@inject NavigationManager NavigationManager
@inject NotificationService NotificationService
@inject IDbContextFactory<FosterRosterDbContext> ContextFactory
@inject ILogger<SourcesPage> Logger;

<PageTitle>Sources</PageTitle>
<RadzenStack>
    <AppFormPanel>
        <SourceForm
            Source="_source"
            OnDelete="DeleteAsync"
            OnSave="SaveAsync"
        />
    </AppFormPanel>
    <AppGridPanel>
        <RadzenDataGrid
            @ref="_grid"
            TItem="GridRow"
            AllowFiltering="true"
            AllowPaging="true"
            AllowSorting="true"
            Count="_count"
            Data="_data"
            Density="Density.Compact"
            FilterMode="FilterMode.Simple"
            FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive"
            IsLoading="_isLoading"
            LoadData="LoadDataAsync"
            PageNumbersCount="1"
            PagerHorizontalAlign="HorizontalAlign.Center"
            PagerPosition="PagerPosition.Top"
            PageSize="20"
            PageSizeOptions="@( [10, 20, 50, 100])"
            PagingSummaryFormat="Showing {0} to {1} of {2}"
            ShowPagingSummary="true">
            <HeaderTemplate>
                <AppGridHeader Text="Sources">
                    <AppGridButton Click="@(() => Edit(0))" Text="Add"/>
                </AppGridHeader>
            </HeaderTemplate>
            <Columns>
                <RadzenDataGridColumn Width="6ch">
                    <Template Context="data">
                        <AppGridButton Click="@(() => Edit(data.Id))" Text="Edit"/>
                    </Template>
                </RadzenDataGridColumn>
                <RadzenDataGridColumn Property="@nameof(GridRow.Name)" Title="@nameof(GridRow.Name)"/>
            </Columns>
        </RadzenDataGrid>
    </AppGridPanel>
</RadzenStack>

@code {
    private sealed class GridRow
    {
        public required int Id { get; init; }
        public required string Name { get; init; }
    }

    private int _count;
    private IEnumerable<GridRow>? _data;
    private RadzenDataGrid<GridRow>? _grid;
    private bool _isLoading;
    private Source _source = new();

    /// <summary>
    ///     The ID of the source currently being edited.
    /// </summary>
    [Parameter]
    public int? SourceId { get; set; }

    /// <summary>
    ///     Delete an existing source identified by its ID.
    /// </summary>
    /// <param name="sourceId">ID of source to delete.</param>
    private async Task DeleteAsync(int sourceId)
    {
        var rs = await SourceRepository.DeleteByKeyAsync(sourceId);
        NotificationService.Notify(rs, "Deleted source", "Failed to delete source");
        if (rs.IsSuccess)
        {
            await _grid!.Reload();
            Edit(0);
        }
    }

    /// <summary>
    ///     Edit the specified source.
    /// </summary>
    /// <param name="sourceId"></param>
    private void Edit(int sourceId)
        => NavigationManager.NavigateTo(sourceId == 0 ? "/sources" : $"/sources/{sourceId}");

    /// <summary>
    ///     Loads paged data for the grid.
    /// </summary>
    /// <param name="args">Radzen grid arguments</param>
    private async Task LoadDataAsync(LoadDataArgs args)
    {
        _isLoading = true;
        try
        {
            Logger.LogDebug("LoadDataAsync");
            await using var dbContext = await ContextFactory.CreateDbContextAsync();
            (_data, _count) = await dbContext
                .Sources
                .AsNoTracking()
                .Select(e => new GridRow { Id = e.Id, Name = e.Name })
                .ToQueryResultsAsync(args, "Name asc");
        }
        catch (Exception ex)
        {
            NotificationService.Notify(NotificationSeverity.Error, "Failed to load data", ex.GetBaseException().Message);
        }
        finally
        {
            _isLoading = false;
        }
    }

    /// <summary>
    ///     
    /// </summary>
    protected override async Task OnParametersSetAsync()
    {
        await base.OnParametersSetAsync();

        // Load the corresponding source from the database.
        var rs = SourceId.HasValue
            ? await SourceRepository.GetByKeyAsync(SourceId.Value)
            : Result.Ok<Source>(new());
        if (rs.IsFailed)
        {
            NavigationManager.NavigateTo("/not-found");
            return;
        }

        _source = rs.Value;
    }

    /// <summary>
    ///     Save the source to the database.
    /// </summary>
    /// <param name="source">Source to add or update.</param>
    private async Task SaveAsync(Source source)
    {
        var rs = source.Id == 0
            ? await SourceRepository.AddAsync(source)
            : await SourceRepository.UpdateAsync(source.Id, source);
        NotificationService.Notify(rs, "Saved source", "Failed to save source");
        if (rs.IsSuccess)
        {
            await _grid!.Reload();
            Edit(rs.Value.Id);
        }
    }
}