@page "/Account/Register"
@attribute [AllowAnonymous]

@inject UserManager<ApplicationUser> UserManager
@inject IUserStore<ApplicationUser> UserStore
@inject SignInManager<ApplicationUser> SignInManager
@inject IEmailSender<ApplicationUser> EmailSender
@inject ILogger<Register> Logger
@inject NavigationManager NavigationManager
@inject IdentityRedirectManager RedirectManager

<PageTitle>Register</PageTitle>
<div class="rz-display-flex rz-row">
    <div
        class="rz-col rz-col-sm-12 rz-col-md-10 rz-offset-md-1 rz-col-lg-8 rz-offset-lg-2 rz-col-xl-6 rz-offset-xl-3 rz-col-xx-4 rz-offset-xx-4">
        <div class="rz-panel rz-shadow-3">
            <StatusMessage Message="@Message"/>
            <div class="rz-panel-titlebar">
                <h2 class="rz-panel-title">Register</h2>
            </div>
            <div class="rz-panel-content">
                <EditForm Model="Input" asp-route-returnUrl="@ReturnUrl" method="post" OnValidSubmit="RegisterUser"
                          FormName="register">
                    <DataAnnotationsValidator/>
                    <RadzenStack Gap="1rem">
                        <RadzenStack Gap="0rem">
                            <RadzenFormField
                                AllowFloatingLabel="false"
                                Component="Input.Email"
                                Text="Email"
                                Variant="Variant.Text">
                                <InputText @bind-Value="Input.Email"
                                           aria-required="true"
                                           autocomplete="username"
                                           class="rz-textbox"
                                           id="Input.Email"
                                           placeholder="name@example.com"
                                           type="text"/>
                            </RadzenFormField>
                            <ValidationMessage For="() => Input.Email"/>
                        </RadzenStack>
                        <RadzenStack Gap="0rem">
                            <RadzenFormField
                                AllowFloatingLabel="false"
                                Component="Input.Password"
                                Text="Password"
                                Variant="Variant.Text">
                                <InputText @bind-Value="Input.Password"
                                           aria-required="true"
                                           autocomplete="new-password"
                                           class="rz-textbox"
                                           id="Input.Password"
                                           placeholder="password"
                                           type="password"/>
                            </RadzenFormField>
                            <ValidationMessage For="() => Input.Password"/>
                        </RadzenStack>
                        <RadzenStack Gap="0rem">
                            <RadzenFormField
                                AllowFloatingLabel="false"
                                Component="Input.Password"
                                Text="Confirm Password"
                                Variant="Variant.Text">
                                <InputText @bind-Value="Input.ConfirmPassword"
                                           aria-required="true"
                                           autocomplete="new-password"
                                           class="rz-textbox"
                                           id="Input.ConfirmPassword"
                                           placeholder="password"
                                           type="password"/>
                            </RadzenFormField>
                            <ValidationMessage For="() => Input.ConfirmPassword"/>
                        </RadzenStack>
                        <RadzenStack
                            AlignItems="AlignItems.Center"
                            Gap="0.5rem"
                            JustifyContent="JustifyContent.End"
                            Orientation="Orientation.Horizontal">
                            <RadzenButton
                                ButtonStyle="ButtonStyle.Primary"
                                ButtonType="ButtonType.Submit"
                                Size="ButtonSize.Small"
                                Text="Register"
                                Variant="Variant.Outlined"/>
                        </RadzenStack>
                    </RadzenStack>
                </EditForm>
            </div>
        </div>
    </div>
</div>

@code {
    private IEnumerable<IdentityError>? _identityErrors;

    [SupplyParameterFromForm] private InputModel Input { get; set; } = new();

    [SupplyParameterFromQuery] private string? ReturnUrl { get; set; }

    private string? Message => _identityErrors is null ? null : $"Error: {string.Join(", ", _identityErrors.Select(error => error.Description))}";

    public async Task RegisterUser(EditContext editContext)
    {
        var user = CreateUser();

        await UserStore.SetUserNameAsync(user, Input.Email, CancellationToken.None);
        var emailStore = GetEmailStore();
        await emailStore.SetEmailAsync(user, Input.Email, CancellationToken.None);
        var result = await UserManager.CreateAsync(user, Input.Password);

        if (!result.Succeeded)
        {
            _identityErrors = result.Errors;
            return;
        }

        Logger.LogInformation("User created a new account with password.");

        var userId = await UserManager.GetUserIdAsync(user);
        var code = await UserManager.GenerateEmailConfirmationTokenAsync(user);
        code = WebEncoders.Base64UrlEncode(Encoding.UTF8.GetBytes(code));
        var callbackUrl = NavigationManager.GetUriWithQueryParameters(
            NavigationManager.ToAbsoluteUri("Account/ConfirmEmail").AbsoluteUri,
            new Dictionary<string, object?> { ["userId"] = userId, ["code"] = code, ["returnUrl"] = ReturnUrl });

        await EmailSender.SendConfirmationLinkAsync(user, Input.Email, HtmlEncoder.Default.Encode(callbackUrl));

        if (UserManager.Options.SignIn.RequireConfirmedAccount)
        {
            RedirectManager.RedirectTo(
                "Account/RegisterConfirmation",
                new() { ["email"] = Input.Email, ["returnUrl"] = ReturnUrl });
        }

        await SignInManager.SignInAsync(user, false);
        RedirectManager.RedirectTo(ReturnUrl);
    }

    private static ApplicationUser CreateUser()
    {
        try
        {
            return Activator.CreateInstance<ApplicationUser>();
        }
        catch
        {
            throw new InvalidOperationException($"Can't create an instance of '{nameof(ApplicationUser)}'. " +
                                                $"Ensure that '{nameof(ApplicationUser)}' is not an abstract class and has a parameterless constructor.");
        }
    }

    private IUserEmailStore<ApplicationUser> GetEmailStore()
    {
        if (!UserManager.SupportsUserEmail)
        {
            throw new NotSupportedException("The default UI requires a user store with email support.");
        }

        return (IUserEmailStore<ApplicationUser>)UserStore;
    }

    private sealed class InputModel
    {
        [Required]
        [EmailAddress]
        [Display(Name = "Email")]
        public string Email { get; set; } = "";

        [Required]
        [StringLength(100, ErrorMessage = "The {0} must be at least {2} and at max {1} characters long.", MinimumLength = 6)]
        [DataType(DataType.Password)]
        [Display(Name = "Password")]
        public string Password { get; set; } = "";

        [DataType(DataType.Password)]
        [Display(Name = "Confirm password")]
        [Compare("Password", ErrorMessage = "The password and confirmation password do not match.")]
        public string ConfirmPassword { get; set; } = "";
    }

}