@page "/Account/Manage/ChangePassword"

@inject UserManager<ApplicationUser> UserManager
@inject SignInManager<ApplicationUser> SignInManager
@inject IdentityUserAccessor UserAccessor
@inject IdentityRedirectManager RedirectManager
@inject ILogger<ChangePassword> Logger

<PageTitle>Change password</PageTitle>
<RadzenRow>
    <RadzenColumn
        SizeSM="12"
        SizeMD="10" OffsetMD="1"
        SizeLG="8" OffsetLG="2"
        SizeXL="6" OffsetXL="3"
        SizeXX="4" OffsetXX="4">
        <RadzenPanel class="rz-shadow-3">
            <HeaderTemplate>
                <RadzenText TextStyle="TextStyle.H6">Change Password</RadzenText>
            </HeaderTemplate>
            <ChildContent>
                <StatusMessage Message="@_message"/>
                <EditForm Model="Input" FormName="change-password" OnValidSubmit="OnValidSubmitAsync" method="post">
                    <DataAnnotationsValidator/>
                    <RadzenStack Gap="1rem">
                        <RadzenStack Gap="0rem">
                            <RadzenFormField
                                AllowFloatingLabel="false"
                                Component="Input.OldPassword"
                                Text="Old password"
                                Variant="Variant.Text">
                                <InputText @bind-Value="Input.OldPassword"
                                           aria-required="true"
                                           autocomplete="current-password"
                                           class="rz-textbox"
                                           id="Input.OldPassword"
                                           placeholder="Enter the old password"
                                           type="password"/>
                            </RadzenFormField>
                            <ValidationMessage For="() => Input.OldPassword" />    
                        </RadzenStack>
                        <RadzenStack Gap="0rem">
                            <RadzenFormField
                                AllowFloatingLabel="false"
                                Component="Input.NewPassword"
                                Text="New password"
                                Variant="Variant.Text">
                                <InputText @bind-Value="Input.NewPassword"
                                           aria-required="true"
                                           autocomplete="current-password"
                                           class="rz-textbox"
                                           id="Input.NewPassword"
                                           placeholder="Enter the new password"
                                           type="password"/>
                            </RadzenFormField>
                            <ValidationMessage For="() => Input.NewPassword" />
                        </RadzenStack>
                        <RadzenStack Gap="0rem">
                            <RadzenFormField
                                AllowFloatingLabel="false"
                                Component="Input.ConfirmPassword"
                                Text="Confirm password"
                                Variant="Variant.Text">
                                <InputText @bind-Value="Input.ConfirmPassword"
                                           aria-required="true"
                                           autocomplete="current-password"
                                           class="rz-textbox"
                                           id="Input.ConfirmPassword"
                                           placeholder="Enter the new password"
                                           type="password"/>
                            </RadzenFormField>
                            <ValidationMessage For="() => Input.ConfirmPassword" />
                        </RadzenStack>
                        <RadzenStack
                            AlignItems="AlignItems.Center"
                            Gap="0.5rem"
                            JustifyContent="JustifyContent.End"
                            Orientation="Orientation.Horizontal">
                            <RadzenButton
                                ButtonStyle="ButtonStyle.Primary"
                                ButtonType="ButtonType.Submit"
                                Size="ButtonSize.Small"
                                Text="Update password"
                                Variant="Variant.Outlined"/>
                        </RadzenStack>
                    </RadzenStack>
                </EditForm>
            </ChildContent>
        </RadzenPanel>
    </RadzenColumn>
</RadzenRow>

@code {
    private string? _message;
    private ApplicationUser _user = null!;
    private bool _hasPassword;

    [CascadingParameter] private HttpContext HttpContext { get; set; } = default!;

    [SupplyParameterFromForm] private InputModel Input { get; set; } = new();

    protected override async Task OnInitializedAsync()
    {
        _user = await UserAccessor.GetRequiredUserAsync(HttpContext);
        _hasPassword = await UserManager.HasPasswordAsync(_user);
        if (!_hasPassword)
        {
            RedirectManager.RedirectTo("Account/Manage/SetPassword");
        }
    }

    private async Task OnValidSubmitAsync()
    {
        var changePasswordResult = await UserManager.ChangePasswordAsync(_user, Input.OldPassword, Input.NewPassword);
        if (!changePasswordResult.Succeeded)
        {
            _message = $"Error: {string.Join(",", changePasswordResult.Errors.Select(error => error.Description))}";
            return;
        }

        await SignInManager.RefreshSignInAsync(_user);
        Logger.LogInformation("User changed their password successfully.");

        RedirectManager.RedirectToCurrentPageWithStatus("Your password has been changed", HttpContext);
    }

    private sealed class InputModel
    {
        [Required]
        [DataType(DataType.Password)]
        [Display(Name = "Current password")]
        public string OldPassword { get; set; } = "";

        [Required]
        [StringLength(100, ErrorMessage = "The {0} must be at least {2} and at max {1} characters long.", MinimumLength = 6)]
        [DataType(DataType.Password)]
        [Display(Name = "New password")]
        public string NewPassword { get; set; } = "";

        [DataType(DataType.Password)]
        [Display(Name = "Confirm new password")]
        [Compare("NewPassword", ErrorMessage = "The new password and confirmation password do not match.")]
        public string ConfirmPassword { get; set; } = "";
    }
}