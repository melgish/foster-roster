@page "/felines"
@rendermode @(new InteractiveServerRenderMode(false))
@inject NotificationService NotificationService
@inject FelineRepository FelineRepository

<PageTitle>Felines</PageTitle>
<RadzenStack>
    <AppGridPanel>
        <RadzenDataGrid
            @ref="_grid"
            TItem="GridRow"
            AllowFiltering="true"
            AllowPaging="true"
            AllowSorting="true"
            Count="_count"
            Data="_data"
            Density="Density.Compact"
            FilterMode="FilterMode.Simple"
            FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive"
            IsLoading="_isLoading"
            LoadData="LoadDataAsync"
            PageNumbersCount="1"
            PagerHorizontalAlign="HorizontalAlign.Center"
            PagerPosition="PagerPosition.Top"
            PageSize="20"
            PageSizeOptions="@( [10, 20, 50, 100])"
            PagingSummaryFormat="Showing {0} to {1} of {2}"
            ShowPagingSummary="true">
            <HeaderTemplate>
                <AppGridHeader Text="Felines">
                    <RadzenLink Path="/intake">
                        <AppGridButton Text="Intake"/>
                    </RadzenLink>
                </AppGridHeader>
            </HeaderTemplate>
            <Columns>
                <RadzenDataGridColumn
                    Filterable="false"
                    Sortable="false"
                    Property="@nameof(GridRow.Id)"
                    Width="6ch">
                    <Template>
                        <RadzenLink Path="@($"/felines/{context.Id}")">
                            <AppGridButton ButtonStyle="ButtonStyle.Secondary" Text="Edit"/>
                        </RadzenLink>
                    </Template>
                </RadzenDataGridColumn>
                <RadzenDataGridColumn
                    Property="@nameof(GridRow.Name)"
                    SortOrder="SortOrder.Ascending"
                    MinWidth="12ch"
                    Title="Name"/>
                <RadzenDataGridColumn
                    Property="@nameof(GridRow.FostererName)"
                    MinWidth="12ch"
                    Title="Fosterer"/>
                <RadzenDataGridColumn
                    FilterValue="@_isInactiveFilter"
                    Property="@nameof(GridRow.IsInactive)"
                    Title="Inactive"
                    Width="19ch">
                    <FilterTemplate>
                        <AppGridInactiveFilter @bind-Value="_isInactiveFilter"/>
                    </FilterTemplate>
                    <Template>
                        <AppGridInactiveValue Value="context.IsInactive"/>
                    </Template>
                </RadzenDataGridColumn>
            </Columns>
        </RadzenDataGrid>
    </AppGridPanel>
</RadzenStack>

@code {
    private bool _isLoading;
    private int _count;
    private IEnumerable<GridRow>? _data;
    private bool? _isInactiveFilter = false;
    private RadzenDataGrid<GridRow>? _grid;

    private sealed class GridRow
    {
        public int Id { get; init; }
        public string Name { get; init; } = string.Empty;
        public string FostererName { get; init; } = string.Empty;
        public bool IsInactive { get; init; }
    }

    /// <summary>
    ///     Called by grid to fetch data.
    /// </summary>
    /// <param name="args">Arguments supplied by grid.</param>
    private async Task LoadDataAsync(LoadDataArgs args)
    {
        _isLoading = true;
        try
        {
            await using var query = await FelineRepository.CreateQueryAsync();
            (_data, _count) = await query
                .IgnoreQueryFilters()
                .AsNoTracking()
                .Include(f => f.Fosterer)
                .Select(f => new GridRow
                {
                    Id = f.Id,
                    Name = f.Name,
                    IsInactive = f.IsInactive,
                    FostererName = f.Fosterer != null ? f.Fosterer.Name : ""
                })
                .ToGridResultsAsync(args, "Name asc");
        }
        catch (Exception ex)
        {
            NotificationService.Notify(NotificationSeverity.Error, "Failed to load data", ex.GetBaseException().Message);
        }
        finally
        {
            _isLoading = false;
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender && _grid is not null)
        {
            // Load initial filter values into the grid.
            await _grid.ColumnsCollection
                .First(e => e.Property == nameof(GridRow.IsInactive))
                .SetFilterValueAsync(_isInactiveFilter);
        }

        await base.OnAfterRenderAsync(firstRender);
    }

}