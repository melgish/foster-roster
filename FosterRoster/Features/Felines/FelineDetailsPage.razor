@page "/felines/{FelineId:int}"
@attribute [AllowAnonymous]
@rendermode @(new InteractiveServerRenderMode(false))

@using FosterRoster.Features.Comments
@using FosterRoster.Features.Chores
@using FosterRoster.Features.Vaccinations
@using FosterRoster.Features.Weights

@inject CommentRepository CommentRepository
@inject DialogService DialogService
@inject FelineRepository FelineRepository
@inject NavigationManager NavigationManager
@inject NotificationService NotificationService

<PageTitle>Details: @Name</PageTitle>
@if (_feline is null)
{
    <AppLoading/>
}
else
{
    <RadzenStack>
        <AppFormPanel>
        <AuthorizeView Roles="Admin,User">
            <Authorized>
                <FelineForm Feline="@_feline"
                            OnActivate="OnActivateAsync"
                            OnDelete="DeleteFelineAsync"
                            OnInactivate="OnInactivateAsync"
                            OnSave="SaveFelineAsync"/>
            </Authorized>
            <NotAuthorized>
                <FelineForm Feline="@_feline" ReadOnly="true"/>
            </NotAuthorized>
        </AuthorizeView>
        </AppFormPanel>
        <AuthorizeView Roles="Admin,User">
            <RadzenPanel class="rz-p-0 rz-shadow-3">
                <div class="tabs">
                    <RadzenTabs>
                        <Tabs>
                            <RadzenTabsItem Text="Journal" Icon="edit" class="bar">
                                <CommentForm OnSave="AddCommentAsync" Model="@_comment"/>
                                @foreach (var comment in _feline.Comments)
                                {
                                    <CommentCard
                                        @key="comment.Id"
                                        Comment="comment"
                                        OnSave="UpdateCommentAsync"
                                        OnDelete="DeleteCommentAsync"/>
                                }
                            </RadzenTabsItem>
                            <RadzenTabsItem Icon="task_alt" Text="Tasks">
                                <ChoresTab FelineId="@FelineId" OnChoreLogged="RefreshAsync"/>
                            </RadzenTabsItem>
                            <RadzenTabsItem Icon="scale" Text="Weights">
                                <WeightsTab FelineId="@FelineId" />
                            </RadzenTabsItem>
                            <RadzenTabsItem Icon="syringe" Text="Vaccinations">
                                <VaccinationsTab FelineId="@FelineId" />
                            </RadzenTabsItem>
                        </Tabs>
                    </RadzenTabs>
                </div>
            </RadzenPanel>
        </AuthorizeView>
    </RadzenStack>
}

@code {
    private FelineFormDto? _feline;
    private CommentFormDto _comment = new();

    private string Name => _feline?.Name ?? string.Empty;

    [Parameter] public int FelineId { get; set; }

    /// <summary>
    ///     Add a new comment to the current feline.
    /// </summary>
    /// <param name="model"></param>
    private async Task AddCommentAsync(CommentFormDto model)
    {
        if (_feline is null) return;

        var rs = await CommentRepository.AddAsync(model);
        if (NotificationService.NotifyResult(rs, "Comment", "add", "added"))
        {
            var rsc = await CommentRepository.GetByKeyAsync(rs.Value.Id);
            _feline.Comments = [rsc.ValueOrDefault.ToFormDto(), .. _feline.Comments];
            _comment = new() { FelineId = FelineId };
        }
    }

    /// <summary>
    ///     Delete the supplied comment from the current feline.
    /// </summary>
    /// <param name="comment">Comment to delete</param>
    private async Task DeleteCommentAsync(IIdBearer? comment)
    {
        if (_feline is null || comment is null) return;
        if (!await DialogService.ConfirmDeleteAsync<ConfirmDeleteComment>(comment.Id, string.Empty))
            return;

        var rs = await CommentRepository.DeleteByKeyAsync(comment.Id);
        if (NotificationService.NotifyResult(rs, "Comment", "delete", "deleted"))
        {
            _feline.Comments = [.. _feline.Comments.Where(c => c.Id != comment.Id)];
        }
    }

    /// <summary>
    ///     Handle when user clicks delete button.
    /// </summary>
    private async Task DeleteFelineAsync()
    {
        var rs = await FelineRepository.DeleteByKeyAsync(FelineId);
        if (NotificationService.NotifyResult(rs, "Feline", "delete", "deleted"))
        {
            // Navigate back to the dashboard.
            NavigationManager.NavigateTo("/");
            return;
        }

        await RefreshAsync();
    }

    private async Task<FelineFormDto?> LoadAsync()
        => (await FelineRepository.GetByKeyAsync(FelineId)).ValueOrDefault;

    protected override async Task OnInitializedAsync()
    {
        _comment = new() { FelineId = FelineId };
        _feline ??= await LoadAsync();
        if (_feline is null)
        {
            NavigationManager.NavigateTo("/not-found");
        }
    }

    /// <summary>
    ///     Handle when user clicks activate button.
    /// </summary>
    private async Task OnActivateAsync()
    {
        var rs = await FelineRepository.ActivateAsync(FelineId);
        NotificationService.NotifyResult(rs, "Feline", "activate", "activated");
        await RefreshAsync();
    }

    /// <summary>
    ///     Handle when user clicks inactivate button
    /// </summary>
    /// <param name="asOf"></param>
    private async Task OnInactivateAsync(DateTimeOffset asOf)
    {
        var rs = await FelineRepository.DeactivateAsync(FelineId, asOf);
        NotificationService.NotifyResult(rs, "Feline", "deactivate", "deactivated");
        await RefreshAsync();
    }

    /// <summary>
    ///     Refresh the page
    /// </summary>
    private async Task RefreshAsync() => _feline = await LoadAsync();

    /// <summary>
    ///     Save event handler for the FelineForm
    /// </summary>
    private async Task SaveFelineAsync(FelineFormDto model)
    {
        var rs = await FelineRepository.UpdateAsync(FelineId, model);
        if (NotificationService.NotifyResult(rs, "Feline", "save", "saved"))
        {
            var rsc = await FelineRepository.GetByKeyAsync(rs.Value.Id);
            _feline = rsc.Value;
        }

        await RefreshAsync();
    }

    /// <summary>
    ///     Update an existing comment.
    /// </summary>
    /// <param name="dto"></param>
    private async Task UpdateCommentAsync(CommentFormDto dto)
    {
        if (_feline is null) return;

        var rs = await CommentRepository.UpdateAsync(dto.Id, dto);
        if (NotificationService.NotifyResult(rs, "Comment", "update", "updated"))
        {
            var rsc = await CommentRepository.GetByKeyAsync(rs.Value.Id);
            var foo = rsc.ValueOrDefault.ToFormDto();

            _feline.Comments = [.. _feline.Comments.Select(c => c.Id == foo.Id ? foo : c)];
        }
    }

}
