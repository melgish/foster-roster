@page "/weights"
@using FosterRoster.Features.Felines
@inject DialogService DialogService
@inject NotificationService NotificationService
@inject WeightRepository WeightRepository
@inject TimeProvider TimeProvider

<PageTitle>Weights</PageTitle>

<RadzenStack>
    <AuthorizeView Roles="Admin,User" Context="user">
        <AppFormPanel>
            <EditForm FormName="weightForm"
                      Model="_model"
                      OnValidSubmit="SaveAsync">
                <FluentValidationValidator/>
                <RadzenStack Gap="0.5rem">
                    <AppFormHeader Text="Enter Weight"/>
                    <AppFormRow>
                        <AppFormColumn>
                            <FelineSelect @bind-Value="@_model.FelineId">
                                <Helper>
                                    <AppRequired/>
                                </Helper>
                            </FelineSelect>
                        </AppFormColumn>
                        <AppFormColumn>
                            <AppDateTime @bind-Value="_model.DateTime" Text="Date">
                                <Helper>
                                    <AppRequired/>
                                </Helper>
                            </AppDateTime>
                        </AppFormColumn>
                    </AppFormRow>
                    <AppFormRow>
                        <AppFormColumn>
                            <AppNumeric @bind-Value="_model.Value" Min="0.0m" Step="0.1" Text="Weight" TValue="float">
                                <Helper>
                                    <AppRequired/>
                                </Helper>
                            </AppNumeric>
                        </AppFormColumn>
                        <AppFormColumn>
                            <WeightUnitSelect @bind-Value="@_model.Units">
                                <Helper>
                                    <AppRequired/>
                                </Helper>
                            </WeightUnitSelect>
                        </AppFormColumn>
                    </AppFormRow>
                    <AppFormFooter>
                        <AppBusyCircle IsBusy="_isSaving"/>
                        <AppFormSaveButton Disabled="_isSaving"/>
                        <AppFormResetButton Click="Reset" Disabled="_isSaving"/>
                    </AppFormFooter>
                </RadzenStack>
            </EditForm>
        </AppFormPanel>
    </AuthorizeView>
    <AppGridPanel>
        <RadzenDataGrid
            @ref="_grid"
            TItem="WeightGridDto"
            AllowFiltering="true"
            AllowPaging="true"
            AllowSorting="true"
            Count="_count"
            Data="_data"
            Density="Density.Compact"
            FilterMode="FilterMode.Simple"
            FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive"
            IsLoading="_isLoading"
            LoadData="LoadDataAsync"
            PageNumbersCount="1"
            PagerHorizontalAlign="HorizontalAlign.Center"
            PagerPosition="PagerPosition.Top"
            PageSize="20"
            PageSizeOptions="@( [10, 20, 50, 100])"
            PagingSummaryFormat="Showing {0} to {1} of {2}"
            ShowPagingSummary="true">
            <HeaderTemplate>
                <AppGridHeader Text="Weights">
                    <RadzenSelectBar
                        @bind-Value="Units"
                        TValue="WeightUnit"
                        Size="ButtonSize.ExtraSmall">
                        <Items>
                            <RadzenSelectBarItem Text="g" Value="WeightUnit.g"/>
                            <RadzenSelectBarItem Text="kg" Value="WeightUnit.kg"/>
                            <RadzenSelectBarItem Text="lbs" Value="WeightUnit.lbs"/>
                            <RadzenSelectBarItem Text="oz" Value="WeightUnit.oz"/>
                        </Items>
                    </RadzenSelectBar>
                    <AuthorizeView Roles="Admin,User">
                        <AppToggle Text="Actions" @bind-Value="_showActions"/>
                    </AuthorizeView>
                </AppGridHeader>
            </HeaderTemplate>
            <Columns>
                <AuthorizeView Roles="Admin,User">
                    <RadzenDataGridColumn
                        Filterable="false"
                        Sortable="false"
                        Visible="_showActions"
                        Width="8ch">
                        <Template Context="data">
                            <AppGridButton ButtonStyle="ButtonStyle.Danger" Click="@(() => DeleteAsync(data))"
                                           Text="Delete"/>
                        </Template>
                    </RadzenDataGridColumn>
                </AuthorizeView>
                <RadzenDataGridColumn
                    Filterable="false"
                    Property="@nameof(WeightGridDto.DateTime)"
                    Title="Date"
                    Width="13ch">
                    <Template Context="row">
                        <AppLocalDateTime Value="row.DateTime"/>
                    </Template>
                </RadzenDataGridColumn>
                <RadzenDataGridColumn
                    MinWidth="12ch"
                    Property="@nameof(WeightGridDto.Name)"
                    Title="Name"/>
                <RadzenDataGridColumn
                    CssClass="rz-py-2"
                    HeaderCssClass="app-text-right"
                    Filterable="false"
                    Property="@nameof(WeightGridDto.Value)"
                    Sortable="false"
                    TextAlign="TextAlign.End"
                    Title="Weight"
                    Width="9ch">
                    <Template Context="data">@data.Value.Format(data.Units, Units)</Template>
                </RadzenDataGridColumn>
            </Columns>
        </RadzenDataGrid>
    </AppGridPanel>
</RadzenStack>

@code {
    private const string EntityName = "Weight";

    private int _count;
    private IEnumerable<WeightGridDto>? _data;
    private RadzenDataGrid<WeightGridDto>? _grid;
    private bool _isLoading;
    private bool _isSaving;
    private WeightFromDto _model = new();
    private bool _showActions;

    /// <summary>
    /// Units to display in the grid
    /// </summary>
    public WeightUnit Units { get; set; } = WeightUnit.lbs;

    /// <summary>
    ///     Delete the weight for the selected row.
    /// </summary>
    /// <param name="data"></param>
    private async Task DeleteAsync(WeightGridDto data)
    {
        if (!await DialogService.ConfirmDeleteAsync<ConfirmDeleteWeight>(1, data.Name))
            return;

        _isSaving = true;
        try
        {
            var rs = await WeightRepository.DeleteByKeyAsync(data.FelineId, data.DateTime);
            if (NotificationService.NotifyResult(rs, EntityName, "delete", "deleted"))
            {
                await _grid!.Reload();
            }
        }
        finally
        {
            _isSaving = false;
        }
    }

    /// <summary>
    ///     Fetch data for the grid.
    /// </summary>
    /// <param name="args"></param>
    private async Task LoadDataAsync(LoadDataArgs args)
    {
        if (_grid is null) return;
        _isLoading = true;
        try
        {
            await using var query = await WeightRepository.CreateQueryAsync();
            (_data, _count) = await query
                .ForFeline(_model.FelineId)
                .SelectToGridDto()
                .ToGridResultsAsync(args, "DateTime desc");
        }
        finally
        {
            _isLoading = false;
        }
    }

    protected override void OnInitialized()
    {
        Reset();
    }

    private void Reset()
    {
        // Start a new form, but keep the selected unit type
        _model = new()
        {
            DateTime = TimeProvider.GetUtcNow(),
            Units = _model.Units
        };
    }

    private async Task SaveAsync()
    {
        _isSaving = true;
        var rs = await WeightRepository.AddAsync(_model.ToWeight());
        if (NotificationService.NotifyResult(rs, EntityName, "save", "saved"))
        {
            Reset();
            await _grid!.Reload();
        }

        _isSaving = false;
    }

}
