@page "/schedules"
@page "/schedules/{scheduleId:int}"
@using CronExpressionDescriptor

@rendermode @(new InteractiveServerRenderMode(false))

@inject NavigationManager NavigationManager
@inject NotificationService NotificationService
@inject ScheduleRepository ScheduleRepository

<PageTitle>Schedules</PageTitle>
<RadzenStack>
    <AppFormPanel>
        <EditForm FormName="editSchedule" Model="_model" OnValidSubmit="SaveAsync">
            <FluentValidationValidator />
            <RadzenStack Gap="0.5rem">
                <AppFormHeader Text="@_name"/>
                <AppFormRow>
                    <AppFormColumn>
                        <AppTextBox @bind-Value="@_model.Name" Disabled="_isSaving" Text="Name"/>
                    </AppFormColumn>
                    <AppFormColumn>
                        <AppTextBox 
                            @bind-Value="@_model.Cron"
                            @oninput="@(e => _model.Cron = e.Value?.ToString() ?? string.Empty)"
                            Disabled="_isSaving" 
                            Text="Cron Expression"/>
                    </AppFormColumn>
                </AppFormRow>
                <AppFormFooter>
                    <div style="margin-right: auto">
                        <small style="color: var(--rz-input-placeholder-color)">Description:</small>
                        <CronDescription Cron="@_model.Cron"/>
                    </div>
                    <AppBusyCircle IsBusy="_isSaving"/>
                    @if (_model.Id != 0)
                    {
                        <AppFormDeleteButton Click="DeleteAsync" Disabled="_isSaving"/>
                    }
                    <AppFormSaveButton Disabled="_isSaving"/>
                    <AppFormResetButton Click="ResetAsync" Disabled="_isSaving"/>
                </AppFormFooter>
            </RadzenStack>            
        </EditForm>
    </AppFormPanel>
    <AppGridPanel>
        <RadzenDataGrid
            @ref="_grid"
            TItem="GridRow"
            AllowFiltering="true"
            AllowPaging="true"
            AllowSorting="true"
            Count="_count"
            Data="_data"
            Density="Grid.Density"
            FilterMode="FilterMode.Simple"
            FilterCaseSensitivity="Grid.FilterCaseSensitivity"
            IsLoading="_isLoading"
            LoadData="LoadDataAsync"
            PageNumbersCount="Grid.PageNumbersCount"
            PagerHorizontalAlign="Grid.PagerHorizontalAlign"
            PagerPosition="Grid.PagerPosition"
            PageSize="Grid.PageSize"
            PageSizeOptions="Grid.PageSizeOptions"
            PagingSummaryFormat="@Grid.PagingSummaryFormat"
            ShowPagingSummary="true">
            <HeaderTemplate>
                <AppGridHeader Text="Schedules">
                    <AppGridButton Click="@(() => Edit(0))" Text="Add"/>
                </AppGridHeader>
            </HeaderTemplate>
            <Columns>
                <RadzenDataGridColumn Width="6ch">
                    <Template Context="data">
                        <AppGridButton ButtonStyle="ButtonStyle.Secondary" Click="@(() => Edit(data.Id))" Text="Edit"/>
                    </Template>
                </RadzenDataGridColumn>
                <RadzenDataGridColumn Property="@nameof(GridRow.Name)" Title="@nameof(GridRow.Name)"/>
                <RadzenDataGridColumn
                    Filterable="false"
                    Property="@nameof(GridRow.Cron)" 
                    Title="Cron Expression"/>
            </Columns>
        </RadzenDataGrid>
    </AppGridPanel>
</RadzenStack>

@code {
    private sealed class GridRow
    {
        public required string Cron { get; init; }
        public required int Id { get; init; }
        public required string Name { get; init; }
    }
    
    private const string Route = "/schedules";
    private const string EntityName = "Schedule";
    
    private int _count;
    private IEnumerable<GridRow>? _data;
    private RadzenDataGrid<GridRow>? _grid;
    private bool _isLoading;
    private bool _isSaving;
    private ScheduleEditModel _model = new();
    private string _name = $"Create New {EntityName}";
    private string _description = string.Empty;
    
    [Parameter] public int ScheduleId { get; set; }
    
    /// <summary>
    ///     Delete the schedule currently being edited.
    /// </summary>
    private async Task DeleteAsync()
    {
        if (_model.Id == 0)
            return;

        _isSaving = true;
        try
        {
            var rs = await ScheduleRepository.DeleteByKeyAsync(_model.Id);
            NotificationService.Notify(rs, "Deleted schedule", "Failed to delete schedule");
            if (rs.IsSuccess)
            {
                await _grid!.Reload();
                Edit(0);
            }
        }
        finally
        {
            _isSaving = false;
        }
    }
    
    /// <summary>
    ///     Edit the specified schedule.
    /// </summary>
    /// <param name="entityId">ID of the entity to edit or 0 to create a new one.</param>
    private void Edit(int entityId)
        => NavigationManager.NavigateTo(entityId == 0 ? Route : $"{Route}/{entityId}");

    private static string GetDescription(string expression)
    {
        if (string.IsNullOrWhiteSpace(expression))
            return string.Empty;
        return ExpressionDescriptor.GetDescription(expression);
    }
    
    /// <summary>
    ///     Loads paged data for the grid.
    /// </summary>
    /// <param name="args">Radzen grid arguments</param>
    private async Task LoadDataAsync(LoadDataArgs args)
    {
        _isLoading = true;
        try
        {
            await using var query = await ScheduleRepository.CreateQueryAsync();
            (_data, _count) = await query
                .AsNoTracking()
                .Select(e => new GridRow { Cron = e.Cron, Id = e.Id, Name = e.Name })
                .ToGridResultsAsync(args, "Name asc");
        }
        catch (Exception ex)
        {
            NotificationService.Notify(NotificationSeverity.Error, "Failed to load data", ex.GetBaseException().Message);
        }
        finally
        {
            _isLoading = false;
        }
    }
    
    /// <summary>
    ///     Invoked when the component is initialized.
    /// </summary>
    protected override async Task OnParametersSetAsync()
    {
        // Initialize the model to be edited.
        await ResetAsync();
        await base.OnParametersSetAsync();
    }

    /// <summary>
    ///     Invoked when form reset is requested.
    /// </summary>
    private async Task ResetAsync()
    {
        // Reset the model to be edited.
        var rs = ScheduleId != 0
            ? await ScheduleRepository.GetByKeyAsync(ScheduleId)
            : Result.Ok<Schedule>(new());
        if (rs.IsFailed)
        {
            NavigationManager.NavigateTo("/not-found");
            return;
        }

        _name = rs.Value.Id == 0 ? $"Create New {EntityName}" : rs.Value.Name;
        _model = new(rs.Value);
    }

    /// <summary>
    ///     Save the schedule to the database.
    /// </summary>
    /// <param name="editContext">Form context</param>
    private async Task SaveAsync(EditContext editContext)
    {
        var rs = _model.Id == 0
            ? await ScheduleRepository.AddAsync(_model)
            : await ScheduleRepository.UpdateAsync(_model.Id, _model);
        NotificationService.Notify(rs, $"Saved {EntityName}", $"Failed to save {EntityName}");
        if (rs.IsSuccess)
        {
            await _grid!.Reload();
            Edit(_model.Id);
        }
    }
    
}