@page "/users"
@page "/users/{userId:int}"

@rendermode @(new InteractiveServerRenderMode(false))
@inject DialogService DialogService
@inject NavigationManager NavigationManager
@inject NotificationService NotificationService
@inject UserRepository UserRepository

<PageTitle>Users</PageTitle>
<RadzenStack>
    <AppFormPanel>
        <EditForm FormName="editUser" Model="_model" OnValidSubmit="SaveAsync">
            <FluentValidationValidator/>
            <RadzenStack Gap="0.5rem">
                <AppFormHeader Text="@_name"/>
                <AppFormRow>
                    <AppFormColumn>
                        <AppTextBox @bind-Value="_model.UserName" Text="User Name"/>
                    </AppFormColumn>
                    <AppFormColumn>
                        <RoleSelect @bind-Value="_model.Role" Text="Role" />
                    </AppFormColumn>
                </AppFormRow>
                <AppFormRow>
                    <AppFormColumn>
                        <AppTextBox @bind-Value="_model.Email" Text="Email"/>
                    </AppFormColumn>
                    <AppFormColumn>
                        <AppTextBox @bind-Value="_model.PhoneNumber" Text="Phone Number"/>
                    </AppFormColumn>
                </AppFormRow>
                <AppFormRow>
                    <AppFormColumn>
                        <AppTextBox @bind-Value="_model.Password" Text="Password"/>
                    </AppFormColumn>
                    <AppFormColumn>
                        <AppTextBox @bind-Value="_model.ConfirmPassword" Text="Confirm Password"/>
                    </AppFormColumn>
                    <AppFormColumn SizeSM="12">
                        To keep current password, leave both fields blank.
                    </AppFormColumn>
                </AppFormRow>
                <AppFormFooter>
                    <AppBusyCircle IsBusy="_isSaving"/>
                    @if (_model.Id != 0)
                    {
                        <AppFormDeleteButton Click="DeleteAsync" Disabled="_isSaving"/>
                    }
                    <AppFormSaveButton Disabled="_isSaving"/>
                    <AppFormResetButton Click="ResetAsync" Disabled="_isSaving"/>
                </AppFormFooter>
            </RadzenStack>
        </EditForm>
    </AppFormPanel>
    <AppGridPanel>
        <RadzenDataGrid
            @ref="_grid"
            TItem="GridRow"
            AllowFiltering="true"
            AllowPaging="true"
            AllowSorting="true"
            Count="_count"
            Data="_data"
            Density="Density.Compact"
            FilterMode="FilterMode.Simple"
            FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive"
            IsLoading="_isLoading"
            LoadData="LoadDataAsync"
            PageNumbersCount="1"
            PagerHorizontalAlign="HorizontalAlign.Center"
            PagerPosition="PagerPosition.Top"
            PageSize="20"
            PageSizeOptions="@( [10, 20, 50, 100])"
            PagingSummaryFormat="Showing {0} to {1} of {2}"
            ShowPagingSummary="true">
            <HeaderTemplate>
                <AppGridHeader Text="Users">
                    <AppGridButton Click="@(() => Edit(0))" Text="Add"/>
                </AppGridHeader>
            </HeaderTemplate>
            <Columns>
                <RadzenDataGridColumn Width="6ch">
                    <Template Context="data">
                        <AppGridButton ButtonStyle="ButtonStyle.Secondary" Click="@(() => Edit(data.Id))" Text="Edit"/>
                    </Template>
                </RadzenDataGridColumn>
                <RadzenDataGridColumn 
                    Property="@nameof(GridRow.UserName)" 
                    Title="User Name"/>
                <RadzenDataGridColumn
                    Property="@nameof(GridRow.Email)"
                    Title="Email Address"/>
                <RadzenDataGridColumn
                    Property="@nameof(GridRow.PhoneNumber)"
                    Title="Phone Number"/>
            </Columns>
        </RadzenDataGrid>        
    </AppGridPanel>
</RadzenStack>

@code {
    private const string Route = "/users";
    private const string EntityName = "User";

    private sealed class GridRow
    {
        public required string? Email { get; init; }
        public required int Id { get; init; }
        public required string? PhoneNumber { get; init; }
        public required string UserName { get; init; }
    }
    
    private int _count;
    private IEnumerable<GridRow>? _data;
    private RadzenDataGrid<GridRow>? _grid;
    private bool _isLoading;
    private bool _isSaving;
    private string _name = string.Empty;
    private UserFormDto _model = new();

    [Parameter] public int UserId { get; set; }

    /// <summary>
    ///     Delete the user currently being edited.
    /// </summary>
    private async Task DeleteAsync()
    {
        if (_model.Id == 0)
            return;
        
        _isSaving = true;
        try
        {
            var rs = await UserRepository.DeleteByKeyAsync(_model.Id);
            NotificationService.Notify(rs, "Deleted User", "Failed to Delete User");
            if (rs.IsSuccess)
            {
                await _grid!.Reload();
                Edit(0);
            }
        }
        finally
        {
            _isSaving = false;
        }
    }
    /// <summary>
    ///     Edit the specified source.
    /// </summary>
    /// <param name="entityId">ID of the entity to edit or 0 to create a new one.</param>
    private void Edit(int entityId)
        => NavigationManager.NavigateTo(entityId == 0 ? Route : $"{Route}/{entityId}");
    
    /// <summary>
    ///     Load users for the grid.
    /// </summary>
    /// <param name="args">Grid filters and paging values</param>
    private async Task LoadDataAsync(LoadDataArgs args)
    {
        _isLoading = true;
        try
        {
            await using var query = await UserRepository.CreateQueryAsync();
            (_data, _count) = await query
                .AsNoTracking()
                .Select(e => new GridRow
                {
                    Email = e.Email,
                    Id = e.Id,
                    PhoneNumber = e.PhoneNumber,
                    UserName = e.UserName ?? string.Empty,
                })
                .ToGridResultsAsync(args, "UserName asc");
        }
        catch (Exception ex)
        {
            NotificationService.Notify(NotificationSeverity.Error, "Failed to load data", ex.GetBaseException().Message);
        }
        finally
        {
            _isLoading = false;
        }
    }

    /// <summary>
    ///     Invoked when the component is initialized.
    /// </summary>
    protected override async Task OnParametersSetAsync()
    {
        // Initialize the model to be edited.
        await ResetAsync();
        await base.OnParametersSetAsync();
    }
    
    /// <summary>
    /// 
    /// </summary>
    private async Task ResetAsync()
    {
        // Reset the model being edited
        var rs = UserId == 0
            ? Result.Ok<UserFormDto>(new())
            : await UserRepository.GetByKeyAsync(UserId);
        if (rs.IsFailed)
        {
            NavigationManager.NavigateTo("/not-found");
            return;
        }

        _name = rs.Value.Id == 0 ? "Create New User" : rs.Value.UserName!;
        _model = rs.Value;
    }

    /// <summary>
    ///     Save the user to the database.
    /// </summary>
    /// <param name="editContext">Form context</param>
    private async Task SaveAsync(EditContext editContext)
    {
        var rs = _model.Id == 0
            ? await UserRepository.AddAsync(_model)
            : await UserRepository.UpdateAsync(_model.Id, _model);
        NotificationService.Notify(rs, $"Saved {EntityName}", $"Failed to save {EntityName}");                
        await Task.CompletedTask;
    }
}