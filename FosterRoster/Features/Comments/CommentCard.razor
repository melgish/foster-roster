@if (_model is null)
{
    <RadzenCard Variant="Variant.Outlined" class="rz-py-1 rz-px-2">
        <RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" Gap="0.5rem" class="rz-mb-1">
            <RadzenButton ButtonStyle="ButtonStyle.Danger"
                          Click="DeleteAsync"
                          Size="ButtonSize.Small"
                          Text="Delete"
                          Variant="Variant.Outlined"/>
            <RadzenButton ButtonStyle="ButtonStyle.Primary"
                          Click="EditAsync"
                          Size="ButtonSize.Small"
                          Text="Edit"
                          Variant="Variant.Outlined"/>
            <AppLocalDateTimeWithAgo Value="Comment.TimeStamp"/>
            @if (Comment.Modified.HasValue)
            {
                <AppLocalDateTimeWithAgo Value="Comment.Modified" Label="Revised"/>
            }
        </RadzenStack>
        <RadzenHtml>@_html</RadzenHtml>
    </RadzenCard>
}
else
{
    <CommentForm Model="_model"
                 OnCancel="CancelAsync"
                 OnDelete="DeleteAsync"
                 OnSave="SaveAsync"/>
}

@code {
    private MarkupString? _html;
    private CommentFormDto? _model;

    [EditorRequired] [Parameter] public Comment Comment { get; set; } = null!;

    [Parameter] public EventCallback<Comment> OnDelete { get; set; }

    [Parameter] public EventCallback<CommentFormDto> OnSave { get; set; }

    private async Task DeleteAsync() => await OnDelete.InvokeAsync(Comment);

    private Task CancelAsync()
    {
        _model = null;
        return Task.CompletedTask;
    }

    private Task EditAsync()
    {
        _model = Comment.ToFormDto();
        return Task.CompletedTask;
    }

    protected override void OnParametersSet()
    {
        _html = new(Comment.Text);
        _model = null;
    }

    private async Task SaveAsync(CommentFormDto model)
    {
        await OnSave.InvokeAsync(model);
        _model = null;
    }

}