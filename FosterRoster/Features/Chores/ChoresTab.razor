@inject ChoreRepository ChoreRepository
@inject NotificationService NotificationService
@inject TimeProvider TimeProvider
@inject DialogService DialogService

<AppGridPanel>
    <RadzenDataGrid
        @ref="_grid"
        TItem="ChoreGridDto"
        AllowFiltering="false"
        AllowPaging="false"
        AllowSorting="false"
        GridLines="DataGridGridLines.Both"
        Count="_count"
        Data="_data"
        Density="Density.Compact"
        FilterMode="FilterMode.Simple"
        FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive"
        IsLoading="_isLoading"
        LoadData="LoadDataAsync"
        PageNumbersCount="1"
        PagerHorizontalAlign="HorizontalAlign.Center"
        PagerPosition="PagerPosition.Top"
        PageSize="20"
        PageSizeOptions="@( [10, 20, 50, 100])"
        PagingSummaryFormat="Showing {0} to {1} of {2}"
        ShowPagingSummary="true">
        <Columns>
            <RadzenDataGridColumn Width="6ch">
                <Template Context="data">
                    <AppGridButton
                        ButtonStyle="ButtonStyle.Secondary"
                        Click="@(() => LogChoreCompletedAsync(data))"
                        Text="Log"/>
                </Template>
            </RadzenDataGridColumn>
            <RadzenDataGridColumn
                MinWidth="12ch"
                Property="@nameof(ChoreGridDto.Name)"
                Title="@nameof(ChoreGridDto.Name)"/>
            <RadzenDataGridColumn
                MinWidth="12ch"
                Property="@nameof(ChoreGridDto.DueDate)"
                Title="Due Date">
                <Template Context="row">
                    <AppLocalDateTime Value="row.DueDate"/>
                </Template>
            </RadzenDataGridColumn>
        </Columns>
    </RadzenDataGrid>
</AppGridPanel>


@code {

    private int _count;
    private IEnumerable<ChoreGridDto>? _data;
    private RadzenDataGrid<ChoreGridDto>? _grid;
    private bool _isLoading;

    [EditorRequired] [Parameter] public int FelineId { get; set; }

    [Parameter] public EventCallback<int> OnChoreLogged { get; set; }

    /// <summary>
    ///     Loads paged data for the grid.
    /// </summary>
    /// <param name="args">Radzen grid arguments.</param>
    private async Task LoadDataAsync(LoadDataArgs args)
    {
        _isLoading = true;
        try
        {
            await using var query = await ChoreRepository.CreateQueryAsync();
            (_data, _count) = await query
                .ForFeline(FelineId)
                .SelectToGridDto()
                .ToGridResultsAsync(args, "Name asc");
        }
        catch (Exception ex)
        {
            NotificationService.NotifyFailedToLoad(ex);
        }
        finally
        {
            _isLoading = false;
        }
    }

    /// <summary>
    ///     Marks individual chores as completed.
    /// </summary>
    /// <param name="choreGridDto">Grid row to log completed.</param>
    private async Task LogChoreCompletedAsync(ChoreGridDto choreGridDto)
    {
        if (await ConfirmTaskComplete.ConfirmAndCompleteAsync(choreGridDto, ChoreRepository, DialogService, NotificationService, TimeProvider))
        {
            await OnChoreLogged.InvokeAsync();
            await _grid!.Reload();
        }
    }
}