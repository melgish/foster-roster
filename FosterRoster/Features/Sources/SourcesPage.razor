@page "/sources"
@page "/sources/{sourceId:int}"

@rendermode @(new InteractiveServerRenderMode(false))

@inject DialogService DialogService
@inject NavigationManager NavigationManager
@inject NotificationService NotificationService
@inject SourceRepository SourceRepository

<PageTitle>Sources</PageTitle>
<RadzenStack>
    <AppFormPanel>
        <EditForm FormName="editSource" Model="_model" OnValidSubmit="SaveAsync">
            <FluentValidationValidator/>
            <RadzenStack Gap="0.5rem">
                <AppFormHeader Text="@_name"/>
                <AppFormRow>
                    <AppFormColumn>
                        <AppTextBox @bind-Value="@_model.Name" Disabled="_isSaving" Text="Name">
                            <Helper>
                                <AppRequired/>
                            </Helper>
                        </AppTextBox>
                    </AppFormColumn>
                </AppFormRow>
                <AppFormFooter>
                    <AppBusyCircle IsBusy="_isSaving"/>
                    @if (_model.Id != 0)
                    {
                        <AppFormDeleteButton Click="DeleteAsync" Disabled="_isSaving"/>
                    }
                    <AppFormSaveButton Disabled="_isSaving"/>
                    <AppFormResetButton Click="ResetAsync" Disabled="_isSaving"/>
                </AppFormFooter>
            </RadzenStack>
        </EditForm>
    </AppFormPanel>
    <AppGridPanel>
        <RadzenDataGrid
            @ref="_grid"
            TItem="SourceGridDto"
            AllowFiltering="true"
            AllowPaging="true"
            AllowSorting="true"
            Count="_count"
            Data="_data"
            Density="Grid.Density"
            FilterMode="FilterMode.Simple"
            FilterCaseSensitivity="Grid.FilterCaseSensitivity"
            IsLoading="_isLoading"
            LoadData="LoadDataAsync"
            PageNumbersCount="Grid.PageNumbersCount"
            PagerHorizontalAlign="Grid.PagerHorizontalAlign"
            PagerPosition="Grid.PagerPosition"
            PageSize="Grid.PageSize"
            PageSizeOptions="Grid.PageSizeOptions"
            PagingSummaryFormat="@Grid.PagingSummaryFormat"
            ShowPagingSummary="true">
            <HeaderTemplate>
                <AppGridHeader Text="Sources">
                    <AppGridButton Click="@(() => EditAsync(0))" Text="Add"/>
                </AppGridHeader>
            </HeaderTemplate>
            <Columns>
                <RadzenDataGridColumn Width="6ch">
                    <Template Context="data">
                        <AppGridButton ButtonStyle="ButtonStyle.Secondary" Click="@(() => EditAsync(data.Id))"
                                       Text="Edit"/>
                    </Template>
                </RadzenDataGridColumn>
                <RadzenDataGridColumn Property="@nameof(SourceGridDto.Name)" Title="@nameof(SourceGridDto.Name)"/>
            </Columns>
        </RadzenDataGrid>
    </AppGridPanel>
</RadzenStack>

@code {
    private const string PageRoute = "/sources";
    private const string EntityName = "Source";

    private int _count;
    private IEnumerable<SourceGridDto>? _data;
    private RadzenDataGrid<SourceGridDto>? _grid;
    private bool _isLoading;
    private bool _isSaving;
    private SourceFormDto _model = new();
    private string _name = $"Create New {EntityName}";

    /// <summary>
    ///     The ID of the source currently being edited.
    /// </summary>
    [Parameter]
    public int SourceId { get; set; }

    /// <summary>
    ///     Delete the source currently being edited.
    /// </summary>
    private async Task DeleteAsync()
    {
        if (!await DialogService.ConfirmDeleteAsync<ConfirmDeleteSource>(_model.Id, _name))
            return;

        _isSaving = true;
        try
        {
            var rs = await SourceRepository.DeleteByKeyAsync(_model.Id);
            if (NotificationService.NotifyResult(rs, EntityName, "delete", "deleted"))
            {
                await _grid!.Reload();
                await EditAsync(0);
            }
        }
        finally
        {
            _isSaving = false;
        }
    }

    /// <summary>
    ///     Edit the specified entity.
    /// </summary>
    /// <param name="entityId">ID of the entity to edit or 0 to create a new one.</param>
    private async Task EditAsync(int entityId)
    {
        if (entityId == SourceId)
        {
            await ResetAsync();
            return;
        }

        NavigationManager.NavigateTo(entityId == 0 ? PageRoute : $"{PageRoute}/{entityId}");
    }

    /// <summary>
    ///     Loads paged data for the grid.
    /// </summary>
    /// <param name="args">Radzen grid arguments</param>
    private async Task LoadDataAsync(LoadDataArgs args)
    {
        _isLoading = true;
        try
        {
            await using var query = await SourceRepository.CreateQueryAsync();
            (_data, _count) = await query
                .SelectToGridDto()
                .ToGridResultsAsync(args, "Name asc");
        }
        catch (Exception ex)
        {
            NotificationService.NotifyFailedToLoad(ex);
        }
        finally
        {
            _isLoading = false;
        }
    }

    /// <summary>
    ///     Invoked when the component is initialized.
    /// </summary>
    protected override async Task OnParametersSetAsync()
    {
        // Initialize the model to be edited.
        await ResetAsync();
        await base.OnParametersSetAsync();
    }

    /// <summary>
    ///     Invoked when form reset is requested.
    /// </summary>
    private async Task ResetAsync()
    {
        // Reset the model to be edited.
        var rs = SourceId != 0
            ? await SourceRepository.GetByKeyAsync(SourceId)
            : Result.Ok<SourceFormDto>(new());
        if (NavigationManager.VerifyFound(rs))
        {
            _name = rs.Value.Id == 0 ? $"Create New {EntityName}" : rs.Value.Name;
            _model = rs.Value;
        }
    }

    /// <summary>
    ///     Save the source to the database.
    /// </summary>
    /// <param name="editContext">Form context</param>
    private async Task SaveAsync(EditContext editContext)
    {
        var rs = _model.Id == 0
            ? await SourceRepository.AddAsync(_model)
            : await SourceRepository.UpdateAsync(_model.Id, _model);
        if (NotificationService.NotifyResult(rs, EntityName, "save", "saved"))
        {
            await _grid!.Reload();
            await EditAsync(_model.Id);
        }
    }

}