@page "/sources"
@page "/sources/{sourceId:int}"

@rendermode @(new InteractiveServerRenderMode(false))

@inject DialogService DialogService
@inject NavigationManager NavigationManager
@inject NotificationService NotificationService
@inject SourceRepository SourceRepository

<PageTitle>Sources</PageTitle>
<RadzenStack>
    <AppFormPanel>
        <EditForm FormName="editSource" Model="_model" OnValidSubmit="SaveAsync">
            <FluentValidationValidator/>
            <RadzenStack Gap="0.5rem">
                <AppFormHeader Text="@_name"/>
                <RadzenRow Gap="1rem" RowGap="0.5rem">
                    <RadzenColumn SizeSm="6" SizeXS="12">
                        <RadzenStack Gap="0rem">
                            <RadzenFormField AllowFloatingLabel="false" Text="Name" Variant="Variant.Text">
                                <RadzenTextBox @bind-Value="_model.Name"/>
                            </RadzenFormField>
                            <ValidationMessage For="@(() => _model.Name)"/>
                        </RadzenStack>
                    </RadzenColumn>
                </RadzenRow>
                <AppFormFooter>
                    <AppBusyCircle IsBusy="_isSaving"/>
                    @if (_model.Id != 0)
                    {
                        <AppFormDeleteButton Click="DeleteAsync" Disabled="_isSaving"/>
                    }
                    <AppFormSaveButton Disabled="_isSaving"/>
                    <AppFormResetButton Click="ResetAsync" Disabled="_isSaving"/>
                </AppFormFooter>
            </RadzenStack>
        </EditForm>
    </AppFormPanel>
    <AppGridPanel>
        <RadzenDataGrid
            @ref="_grid"
            TItem="GridRow"
            AllowFiltering="true"
            AllowPaging="true"
            AllowSorting="true"
            Count="_count"
            Data="_data"
            Density="Density.Compact"
            FilterMode="FilterMode.Simple"
            FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive"
            IsLoading="_isLoading"
            LoadData="LoadDataAsync"
            PageNumbersCount="1"
            PagerHorizontalAlign="HorizontalAlign.Center"
            PagerPosition="PagerPosition.Top"
            PageSize="20"
            PageSizeOptions="@( [10, 20, 50, 100])"
            PagingSummaryFormat="Showing {0} to {1} of {2}"
            ShowPagingSummary="true">
            <HeaderTemplate>
                <AppGridHeader Text="Sources">
                    <AppGridButton Click="@(() => Edit(0))" Text="Add"/>
                </AppGridHeader>
            </HeaderTemplate>
            <Columns>
                <RadzenDataGridColumn Width="6ch">
                    <Template Context="data">
                        <AppGridButton ButtonStyle="ButtonStyle.Secondary" Click="@(() => Edit(data.Id))" Text="Edit"/>
                    </Template>
                </RadzenDataGridColumn>
                <RadzenDataGridColumn Property="@nameof(GridRow.Name)" Title="@nameof(GridRow.Name)"/>
            </Columns>
        </RadzenDataGrid>
    </AppGridPanel>
</RadzenStack>

@code {

    private sealed class GridRow
    {
        public required int Id { get; init; }
        public required string Name { get; init; }
    }

    private const string Route = "/sources";
    private const string EntityName = "Source";

    private int _count;
    private IEnumerable<GridRow>? _data;
    private RadzenDataGrid<GridRow>? _grid;
    private bool _isLoading;
    private bool _isSaving;
    private SourceEditModel _model = new();
    private string _name = $"Create New {EntityName}";

    /// <summary>
    ///     The ID of the source currently being edited.
    /// </summary>
    [Parameter]
    public int SourceId { get; set; }

    /// <summary>
    ///     Prompt the user to confirm deletion of a fosterer.
    /// </summary>
    /// <returns>True if user confirms the delete action.</returns>
    private async Task<bool> ConfirmDeleteAsync()
        => await DialogService.OpenAsync<ConfirmDeleteSource>(
            "Confirm Delete",
            new() { [nameof(ConfirmDeleteSource.Name)] = _name }
        ) as bool? ?? false;

    /// <summary>
    ///     Delete the source currently being edited.
    /// </summary>
    private async Task DeleteAsync()
    {
        if (!(_model.Id != 0 && await ConfirmDeleteAsync()))
            return;

        _isSaving = true;
        try
        {
            var rs = await SourceRepository.DeleteByKeyAsync(_model.Id);
            NotificationService.Notify(rs, "Deleted source", "Failed to delete source");
            if (rs.IsSuccess)
            {
                await _grid!.Reload();
                Edit(0);
            }
        }
        finally
        {
            _isSaving = false;
        }
    }

    /// <summary>
    ///     Edit the specified source.
    /// </summary>
    /// <param name="entityId">Id of the entity to edit or 0 to create a new one.</param>
    private void Edit(int entityId)
        => NavigationManager.NavigateTo(entityId == 0 ? Route : $"{Route}/{entityId}");

    /// <summary>
    ///     Loads paged data for the grid.
    /// </summary>
    /// <param name="args">Radzen grid arguments</param>
    private async Task LoadDataAsync(LoadDataArgs args)
    {
        _isLoading = true;
        try
        {
            await using var query = await SourceRepository.CreateQueryAsync();
            (_data, _count) = await query
                .AsNoTracking()
                .Select(e => new GridRow { Id = e.Id, Name = e.Name })
                .ToGridResultsAsync(args, "Name asc");
        }
        catch (Exception ex)
        {
            NotificationService.Notify(NotificationSeverity.Error, "Failed to load data", ex.GetBaseException().Message);
        }
        finally
        {
            _isLoading = false;
        }
    }

    /// <summary>
    ///     Invoked when the component is initialized.
    /// </summary>
    protected override async Task OnParametersSetAsync()
    {
        // Initialize the model to be edited.
        await ResetAsync();
        await base.OnParametersSetAsync();
    }

    /// <summary>
    ///     Invoked when form reset is requested.
    /// </summary>
    private async Task ResetAsync()
    {
        // Reset the model to be edited.
        var rs = SourceId != 0
            ? await SourceRepository.GetByKeyAsync(SourceId)
            : Result.Ok<Source>(new());
        if (rs.IsFailed)
        {
            NavigationManager.NavigateTo("/not-found");
            return;
        }

        _name = rs.Value.Id == 0 ? $"Create New {EntityName}" : rs.Value.Name;
        _model = new(rs.Value);
    }

    /// <summary>
    ///     Save the source to the database.
    /// </summary>
    /// <param name="editContext">Form context</param>
    private async Task SaveAsync(EditContext editContext)
    {
        var rs = _model.Id == 0
            ? await SourceRepository.AddAsync(_model.ToSource())
            : await SourceRepository.UpdateAsync(_model.Id, _model.ToSource());
        NotificationService.Notify(rs, $"Saved {EntityName}", $"Failed to save {EntityName}");
        if (rs.IsSuccess)
        {
            await _grid!.Reload();
            Edit(rs.Value.Id);
        }
    }

}